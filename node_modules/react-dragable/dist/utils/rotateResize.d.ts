/**
 * 坐标
 */
export interface Point {
    x: number;
    y: number;
}
/**
 * 图形信息
 */
export interface Rect {
    x: number;
    y: number;
    width: number;
    height: number;
    rotate: number;
}
/**
 * 8个 archor : "nw", "n", "ne", "e", "se", "s", "sw", "w"
 */
export declare const ARCHOR: string[];
/**
 * 操作类型
 *  - ROTATE = "rotate",
 *  - RESIZE = "resize",
 *  - MOVE = "move",
 *  - NONE = ""
 */
export declare enum Actions {
    ROTATE = "rotate",
    RESIZE = "resize",
    MOVE = "move",
    NONE = ""
}
/**
 * archor 类型
 */
export declare type ArchorType = "nw" | "n" | "ne" | "e" | "se" | "s" | "sw" | "w";
/**
 * 初始化常量
 */
export declare const EMPTY_POINT: Point;
export declare const EMPTY_RECT: Rect;
export declare const symmetryPoint: (start: Point, center: Point) => {
    x: number;
    y: number;
};
/**
 * 获取鼠标位置 （使用pageX 受外界影响小）
 * @param e
 */
export declare const getMousePoint: (e: MouseEvent) => {
    x: number;
    y: number;
};
/**
 * 计算一个矩形的中心点坐标
 * @param {*} rect
 */
export declare const rectCenter: (rect: Rect) => {
    x: number;
    y: number;
};
/**
 * 计算向量 point 的角度
 * @param {Point} point
 */
export declare const angleDegrees: (point: Point) => number;
/**
 * 页面坐标点 position 以 relative 点为原点
 * 顺时针旋转 angle 角度后得到的坐标点
 * @param {Point} position
 * @param {Point} relative
 * @param {Number} angle
 */
export declare const rotatePositionRelatively: (position: Point, relative: Point, angle: number) => {
    x: number;
    y: number;
};
/**
 * 页面坐标点 position 以页面左上角为原点，顺时针旋转 angle 角度后得到的坐标点
 * @param {Point} position
 * @param {Number} angle
 */
export declare const rotatePosition: (position: Point, angle: number) => {
    x: number;
    y: number;
};
/**
 * @param {Point} pa
 * @param {Point} pb
 * 获取坐标 pa 和 pb 的中间点坐标
 */
export declare const centerPoint: (pa: Point, pb: Point) => {
    x: number;
    y: number;
};
/**
 * 传入两点坐标，以及(线段 AC 的)倾斜角度
 * 返回唯一确定的矩形的位置
 * @param {Point} pa
 * @param {Point} pb
 * @param {Number} angel
 */
export declare const computeRectWithCrossPoints: (pa: Point, pb: Point, angle: number) => {
    x: number;
    y: number;
    width: number;
    height: number;
    rotate: number;
};
/**
 * 计算一条直线上（由 points 两点确定）离 point 点最近的点，即垂直交叉点
 * @param {Point[]} points
 * @param {Point} point
 */
export declare const squareCrossPoint: (points: Point[], point: Point) => {
    x: number;
    y: number;
};
/**
 * 根据两点坐标，计算距离
 * @param {Point} p0
 * @param {Point} p1
 */
export declare const pointsDistance: (p0: Point, p1: Point) => number;
export declare const EndPoints: {
    new (rect: Rect): {
        rect: Rect;
        _lt: Point | null;
        _rt: Point | null;
        _rb: Point | null;
        _lb: Point | null;
        _ct: Point | null;
        _cb: Point | null;
        _rm: Point | null;
        _lm: Point | null;
        _center: Point | null;
        readonly center: Point;
        readonly lt: Point;
        readonly rt: Point;
        readonly rb: Point;
        readonly lb: Point;
        readonly ct: Point;
        readonly cb: Point;
        readonly rm: Point;
        readonly lm: Point;
    };
};
/**
 * 移动矩形，返回移动的矩形数据
 * @param {Point} mouseStart
 * @param {Point} mouseEnd
 * @param {Rect} rectStart
 */
export declare const moveRect: (mouseStart: Point, mouseEnd: Point, rectStart: Rect) => {
    x: number;
    y: number;
    width: number;
    height: number;
    rotate: number;
};
/**
 * 根据两点坐标，计算其连线的斜率。注意，垂直时斜率是 Infinity
 * @param {Point} p0
 * @param {Point} p1
 */
export declare const lineSlope: (p0: Point, p1: Point) => number;
/**
 * 传入两个点 p0， p1，返回两点连线的倾斜角度
 * 垂直状态是 0，遵循 DOM 的 rotation 规则，值域范围 [-90, 90]
 * @param {Point} p0
 * @param {Point} p1
 */
export declare const lineDegrees: (p0: Point, p1: Point) => number;
/**
 * 计算鼠标从 start 点拖到到 end 点时的旋转角度
 * @param {Point[]} pinnedPoints
 * @param {Point} start
 * @param {Point} end
 */
export declare const computeRotation: (center: Point, start: Point, end: Point) => number;
/**
 * 计算鼠标从 mouseStart 点开始按住旋转到 mouseEnd 后返回的矩形，值域为 [-180, 180]
 * @param {Point} mouseStart
 * @param {Point} mouseEnd
 * @param {Rect} rectStart
 */
export declare const rotateRect: (mouseStart: Point, mouseEnd: Point, rectStart: Rect) => {
    rotate: number;
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * 根据一条边（pinnedPoints 两点确定），和对应的拖拽点（dragPoint），生成一个宽高比固定的矩形
 * @param {Point[]} pinnedPoints 拖拽固定边
 * @param {Point} dragPoint 拖拽点
 * @param {Number} rectRatio 原始矩形的宽高比
 * @param {"width" | "height"} activeExpand 拖拽的属性（width / height）
 */
export declare const computeRatioedRectWithPinnedLine: (pinnedPoints: Point[], dragPoint: Point, rectStart: Rect, activeExpand: "width" | "height" | null) => {
    x: number;
    y: number;
    width: number;
    height: number;
    rotate: number;
};
/**
 * 根据一条线段（由 pinnedPoints 两点确定），拖拽点坐标（dragPoint），以及倾斜角度（angle）返回一个确定的矩形
 * @param {Point[]} pinnedPoints
 * @param {Point} dragPoint
 * @param {Number} angle
 */
export declare const computeRectWithPinnedLine: (pinnedPoints: Point[], dragPoint: Point, angle: number) => {
    x: number;
    y: number;
    width: number | undefined;
    height: number | undefined;
    rotate: number;
};
/**
 * resize 矩形，返回 resize 后的矩形数据
 * @param {Point} mouseStart
 * @param {Point} mouseEnd
 * @param {AdjustType} adjustType
 * @param {Rect} rectStart
 * @param {number} fixedRatio
 */
export declare const resizeRect: (mouseStart: Point, mouseEnd: Point, adjustType: ArchorType, rectStart: Rect, fixedRatio: boolean) => {
    x: number;
    y: number;
    width: number | undefined;
    height: number | undefined;
    rotate: number;
} | undefined;
declare const _default: (adjustType: "nw" | "n" | "ne" | "e" | "se" | "s" | "sw" | "w" | Actions, mouseStart: Point, mouseEnd: Point, rectStart: Rect, fixedRatio?: boolean) => {
    x: number;
    y: number;
    width: number | undefined;
    height: number | undefined;
    rotate: number;
} | undefined;
/**
 * 计算入口
 * @param {Position} mouseStart
 * @param {Position} mouseEnd
 * @param {AdjustType} adjustType: 'rotate'|'move'|'lt'|'rt'|'ct'|'lb'|'rb'|'cb'|'lm'|'rm'|null
 * @param {Rect} rectStart: { x: Number, y: Number, width: Number, height: Number, rotate: Number }
 * @param {Boolean} fixedRatio
 */
export default _default;
