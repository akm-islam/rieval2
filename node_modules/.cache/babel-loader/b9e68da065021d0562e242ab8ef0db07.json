{"ast":null,"code":"//------------------------------------------------------------------------------------------------- Sort Models\nexport function sort(type,state_range,default_models,selected_year,grouped_by_year_data){console.log(type,state_range,default_models,selected_year,grouped_by_year_data,'sort');//------------Handle ndgc sorting\nif(type=='Discounted Cumulative Gain'){var nDCG_dict={\"ndcg_term_CordAscent\":0,\"ndcg_term_LambdaMART\":0,\"ndcg_term_LambdaRank\":0,\"ndcg_term_LinearReg\":0,\"ndcg_term_ListNet\":0,\"ndcg_term_MART\":0,\"ndcg_term_RandomFor\":0,\"ndcg_term_RankBoost\":0,\"ndcg_term_RankNet\":0};for(var i=state_range[0];i<state_range[1];i++){Object.keys(nDCG_dict).forEach(function(key){nDCG_dict[key]=nDCG_dict[key]+parseFloat(grouped_by_year_data[selected_year][i][key]);});}//---- sort\nvar items=Object.keys(nDCG_dict).map(function(key){return[key.substring(10),nDCG_dict[key]];});items.sort(function(first,second){return second[1]-first[1];});var temp_ndcg=[];for(var i=0;i<items.length;i++){if(default_models.includes(items[i][0])){temp_ndcg.push(items[i][0]);}}var temp1={};items.map(function(myitem){temp1[myitem[0]]=myitem[1];});console.log(items);return[temp_ndcg,temp1];}//----\n//------------ Handle AP sorting\nif(type=='Average Precision'){var mydict={};default_models.forEach(function(model){var temp=1;for(var i=state_range[0];i<state_range[1];i++){temp=temp+Math.pow(grouped_by_year_data[selected_year][i][\"two_realRank\"]-grouped_by_year_data[selected_year][i][model],2);}mydict[model]=(state_range[1]-state_range[0]+1)/Math.sqrt(temp);});//---- sort\nvar items=Object.keys(mydict).map(function(key){return[key,mydict[key]];});items.sort(function(first,second){return second[1]-first[1];});var temp_ap=[];for(var i=0;i<items.length;i++){if(default_models.includes(items[i][0])){temp_ap.push(items[i][0]);}}return[temp_ap,mydict];}//------------Handle Alphabatic sorting\nif(type=='Alphabetically'){var temp=default_models.sort();return[temp,[0]];}}export function groupby_year(original_data){var years={};var sparkline_data={};original_data.forEach(function(element){years[element['1-qid']]=[];sparkline_data[element['State'].replace(/ /g,'').replace(/[^\\w\\s]/gi,'')]=[];});original_data.forEach(function(element){var temp_dict={year:parseInt(element['1-qid']),rank:parseInt(element['two_realRank'])};sparkline_data[element['State'].replace(/ /g,'').replace(/[^\\w\\s]/gi,'')].push(temp_dict);years[element['1-qid']].push(element);});return{years:years,sparkline_data:sparkline_data};}export function features_with_score(dataset,models,selected_instances,selected_year,number_of_charts,rank_data){//console.log(dataset, models, selected_instances, selected_year, number_of_charts, rank_data,\"abc\")\nvar temp1={};var temp_final={};models.map(function(model){var temp2={};var v=number_of_charts;var top_nine=sorted_features(dataset,model,selected_instances,selected_year,rank_data);if(top_nine.length<number_of_charts){v=top_nine.length;;number_of_charts=top_nine.length;}// This is because number of charts is calculated based on space but there are cases when we don't have that many features\nfor(var i=0;i<number_of_charts;i++){temp2[top_nine[i]]=v;v=v-1;}temp1[model]=temp2;});for(var key in temp1){for(var key2 in temp1[key]){if(temp_final[key2]>0){temp_final[key2]=temp_final[key2]+temp1[key][key2];}else{temp_final[key2]=temp1[key][key2];}}}console.log(temp_final,\"temp_final\");return temp_final;}export function sorted_features(dataset,model,selected_instances,selected_year,rank_data){// Uses feature rank to rank and return features name by removing the feature_rank string\nif(!selected_instances.length>0){return[];}selected_instances=selected_instances.map(function(element){return element-1;});var tempvoted_data_with_score={},items,data,features;var filtered_rank_data=rank_data[model].filter(function(element){if(parseInt(element['1-qid'])==parseInt(selected_year)){return element;}});data=selected_instances.map(function(index){return filtered_rank_data[index];});features=Object.keys(data[0]);var my_features_rank_col=features.filter(function(item){return item.includes(\"_feature_rank\");});features=my_features_rank_col;data.map(function(item){features.forEach(function(feauture){if(tempvoted_data_with_score[feauture]>=0||tempvoted_data_with_score[feauture]<0){tempvoted_data_with_score[feauture]=tempvoted_data_with_score[feauture]+parseFloat(item[feauture]);}else{tempvoted_data_with_score[feauture]=parseFloat(item[feauture]);}});});//-----------------------------------------------------------------\n// Create items array\nitems=Object.keys(tempvoted_data_with_score).map(function(key){return[key,tempvoted_data_with_score[key]];});// Sort the array based on the second element\nitems.sort(function(first,second){return first[1]-second[1];});var items2=items.map(function(element){return element[0].replace(\"_feature_rank\",\"\");});items2=items2.filter(function(item){return item!=\"1-qid\"&&item!=\"model\";});//console.log(data,selected_instances,filtered_rank_data,\"items2\")\nconsole.log(items2,\"items2\");return items2;// sorted items \n//-----------------------------------------------------------------\n}export function getSortedFeatures(lime_data,selected_instances,selected_year){var filtered_data=lime_data.filter(function(item){return parseInt(item['1-qid'])==selected_year&&selected_instances.includes(item['two_realRank']);});var feature_cols=Object.keys(filtered_data[0]).filter(function(item){return item.includes(\"_contribution\");});//.map(item => item.replace(\"_contribution\", \"\"))\nvar temp=[];feature_cols.map(function(feature){var x=0;filtered_data.map(function(item){x+=parseFloat(item[feature]);});temp.push([feature,x/selected_instances.length]);});return temp.sort(function(a,b){return b[1]-a[1];}).map(function(item){return item[0].replace(\"_contribution\",\"\");});}","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/Algorithms/algo1.js"],"names":["sort","type","state_range","default_models","selected_year","grouped_by_year_data","console","log","nDCG_dict","i","Object","keys","forEach","key","parseFloat","items","map","substring","first","second","temp_ndcg","length","includes","push","temp1","myitem","mydict","model","temp","Math","sqrt","temp_ap","groupby_year","original_data","years","sparkline_data","element","replace","temp_dict","year","parseInt","rank","features_with_score","dataset","models","selected_instances","number_of_charts","rank_data","temp_final","temp2","v","top_nine","sorted_features","key2","tempvoted_data_with_score","data","features","filtered_rank_data","filter","index","my_features_rank_col","item","feauture","items2","getSortedFeatures","lime_data","filtered_data","feature_cols","feature","x","a","b"],"mappings":"AAAA;AACA,MAAO,SAASA,CAAAA,IAAT,CAAcC,IAAd,CAAoBC,WAApB,CAAiCC,cAAjC,CAAiDC,aAAjD,CAAgEC,oBAAhE,CAAsF,CAC3FC,OAAO,CAACC,GAAR,CAAYN,IAAZ,CAAkBC,WAAlB,CAA+BC,cAA/B,CAA+CC,aAA/C,CAA8DC,oBAA9D,CAAmF,MAAnF,EACA;AACA,GAAIJ,IAAI,EAAI,4BAAZ,CAA0C,CACxC,GAAIO,CAAAA,SAAS,CAAG,CAAE,uBAAwB,CAA1B,CAA6B,uBAAwB,CAArD,CAAwD,uBAAwB,CAAhF,CAAmF,sBAAuB,CAA1G,CAA6G,oBAAqB,CAAlI,CAAqI,iBAAkB,CAAvJ,CAA0J,sBAAuB,CAAjL,CAAoL,sBAAuB,CAA3M,CAA8M,oBAAqB,CAAnO,CAAhB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAGP,WAAW,CAAC,CAAD,CAAxB,CAA6BO,CAAC,CAAGP,WAAW,CAAC,CAAD,CAA5C,CAAiDO,CAAC,EAAlD,CAAsD,CACpDC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,OAAvB,CAA+B,SAAAC,GAAG,CAAI,CAClCL,SAAS,CAACK,GAAD,CAAT,CAAiBL,SAAS,CAACK,GAAD,CAAT,CAAiBC,UAAU,CAACT,oBAAoB,CAACD,aAAD,CAApB,CAAoCK,CAApC,EAAuCI,GAAvC,CAAD,CAA5C,CACH,CAFD,EAGD,CACD;AACA,GAAIE,CAAAA,KAAK,CAAGL,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBQ,GAAvB,CAA2B,SAAUH,GAAV,CAAe,CACpD,MAAO,CAACA,GAAG,CAACI,SAAJ,CAAc,EAAd,CAAD,CAAoBT,SAAS,CAACK,GAAD,CAA7B,CAAP,CACD,CAFW,CAAZ,CAGAE,KAAK,CAACf,IAAN,CAAW,SAAUkB,KAAV,CAAiBC,MAAjB,CAAyB,CAClC,MAAOA,CAAAA,MAAM,CAAC,CAAD,CAAN,CAAYD,KAAK,CAAC,CAAD,CAAxB,CACD,CAFD,EAGA,GAAIE,CAAAA,SAAS,CAAG,EAAhB,CACA,IAAK,GAAIX,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGM,KAAK,CAACM,MAA1B,CAAkCZ,CAAC,EAAnC,CAAuC,CACrC,GAAIN,cAAc,CAACmB,QAAf,CAAwBP,KAAK,CAACN,CAAD,CAAL,CAAS,CAAT,CAAxB,CAAJ,CAA0C,CACxCW,SAAS,CAACG,IAAV,CAAeR,KAAK,CAACN,CAAD,CAAL,CAAS,CAAT,CAAf,EACD,CACF,CACD,GAAIe,CAAAA,KAAK,CAAC,EAAV,CACAT,KAAK,CAACC,GAAN,CAAU,SAAAS,MAAM,CAAE,CAACD,KAAK,CAACC,MAAM,CAAC,CAAD,CAAP,CAAL,CAAiBA,MAAM,CAAC,CAAD,CAAvB,CAA2B,CAA9C,EACAnB,OAAO,CAACC,GAAR,CAAYQ,KAAZ,EACA,MAAO,CAACK,SAAD,CAAWI,KAAX,CAAP,CACD,CACD;AAEA;AACA,GAAIvB,IAAI,EAAI,mBAAZ,CAAiC,CAC/B,GAAIyB,CAAAA,MAAM,CAAG,EAAb,CACAvB,cAAc,CAACS,OAAf,CAAuB,SAACe,KAAD,CAAW,CAChC,GAAIC,CAAAA,IAAI,CAAG,CAAX,CACA,IAAK,GAAInB,CAAAA,CAAC,CAAGP,WAAW,CAAC,CAAD,CAAxB,CAA6BO,CAAC,CAAGP,WAAW,CAAC,CAAD,CAA5C,CAAiDO,CAAC,EAAlD,CAAsD,CACpDmB,IAAI,CAAGA,IAAI,UAAIvB,oBAAoB,CAACD,aAAD,CAApB,CAAoCK,CAApC,EAAuC,cAAvC,EAAyDJ,oBAAoB,CAACD,aAAD,CAApB,CAAoCK,CAApC,EAAuCkB,KAAvC,CAA7D,CAA+G,CAA/G,CAAX,CACD,CACDD,MAAM,CAACC,KAAD,CAAN,CAAgB,CAAEzB,WAAW,CAAC,CAAD,CAAX,CAAiBA,WAAW,CAAC,CAAD,CAA7B,CAAoC,CAArC,EAA2C2B,IAAI,CAACC,IAAL,CAAUF,IAAV,CAA3D,CACD,CAND,EAOA;AACA,GAAIb,CAAAA,KAAK,CAAGL,MAAM,CAACC,IAAP,CAAYe,MAAZ,EAAoBV,GAApB,CAAwB,SAAUH,GAAV,CAAe,CACjD,MAAO,CAACA,GAAD,CAAMa,MAAM,CAACb,GAAD,CAAZ,CAAP,CACD,CAFW,CAAZ,CAGAE,KAAK,CAACf,IAAN,CAAW,SAAUkB,KAAV,CAAiBC,MAAjB,CAAyB,CAClC,MAAOA,CAAAA,MAAM,CAAC,CAAD,CAAN,CAAYD,KAAK,CAAC,CAAD,CAAxB,CACD,CAFD,EAGA,GAAIa,CAAAA,OAAO,CAAG,EAAd,CACA,IAAK,GAAItB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGM,KAAK,CAACM,MAA1B,CAAkCZ,CAAC,EAAnC,CAAuC,CACrC,GAAIN,cAAc,CAACmB,QAAf,CAAwBP,KAAK,CAACN,CAAD,CAAL,CAAS,CAAT,CAAxB,CAAJ,CAA0C,CACxCsB,OAAO,CAACR,IAAR,CAAaR,KAAK,CAACN,CAAD,CAAL,CAAS,CAAT,CAAb,EACD,CACF,CACD,MAAO,CAACsB,OAAD,CAASL,MAAT,CAAP,CACD,CACD;AACA,GAAIzB,IAAI,EAAI,gBAAZ,CAA8B,CAC5B,GAAI2B,CAAAA,IAAI,CAACzB,cAAc,CAACH,IAAf,EAAT,CACA,MAAO,CAAC4B,IAAD,CAAM,CAAC,CAAD,CAAN,CAAP,CACD,CACF,CACD,MAAO,SAASI,CAAAA,YAAT,CAAsBC,aAAtB,CAAqC,CAC1C,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,cAAc,CAAG,EAArB,CACAF,aAAa,CAACrB,OAAd,CAAsB,SAAAwB,OAAO,CAAI,CAC/BF,KAAK,CAACE,OAAO,CAAC,OAAD,CAAR,CAAL,CAA0B,EAA1B,CACAD,cAAc,CAACC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAAjB,CAAyB,IAAzB,CAA+B,EAA/B,EAAmCA,OAAnC,CAA2C,WAA3C,CAAwD,EAAxD,CAAD,CAAd,CAA8E,EAA9E,CACD,CAHD,EAKAJ,aAAa,CAACrB,OAAd,CAAsB,SAAAwB,OAAO,CAAI,CAC/B,GAAIE,CAAAA,SAAS,CAAG,CAAEC,IAAI,CAAEC,QAAQ,CAACJ,OAAO,CAAC,OAAD,CAAR,CAAhB,CAAoCK,IAAI,CAAED,QAAQ,CAACJ,OAAO,CAAC,cAAD,CAAR,CAAlD,CAAhB,CACAD,cAAc,CAACC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAAjB,CAAyB,IAAzB,CAA+B,EAA/B,EAAmCA,OAAnC,CAA2C,WAA3C,CAAwD,EAAxD,CAAD,CAAd,CAA4Ed,IAA5E,CAAiFe,SAAjF,EACAJ,KAAK,CAACE,OAAO,CAAC,OAAD,CAAR,CAAL,CAAwBb,IAAxB,CAA6Ba,OAA7B,EACD,CAJD,EAKA,MAAO,CAAEF,KAAK,CAAEA,KAAT,CAAgBC,cAAc,CAAEA,cAAhC,CAAP,CACD,CACD,MAAO,SAASO,CAAAA,mBAAT,CAA6BC,OAA7B,CAAsCC,MAAtC,CAA8CC,kBAA9C,CAAkEzC,aAAlE,CAAiF0C,gBAAjF,CAAmGC,SAAnG,CAA8G,CACnH;AACA,GAAIvB,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIwB,CAAAA,UAAU,CAAG,EAAjB,CACAJ,MAAM,CAAC5B,GAAP,CAAW,SAAAW,KAAK,CAAI,CAClB,GAAIsB,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAIC,CAAAA,CAAC,CAAGJ,gBAAR,CACA,GAAIK,CAAAA,QAAQ,CAAGC,eAAe,CAACT,OAAD,CAAUhB,KAAV,CAAiBkB,kBAAjB,CAAqCzC,aAArC,CAAmD2C,SAAnD,CAA9B,CACA,GAAII,QAAQ,CAAC9B,MAAT,CAAkByB,gBAAtB,CAAwC,CAAEI,CAAC,CAAGC,QAAQ,CAAC9B,MAAb,CAAoB,CAAEyB,gBAAgB,CAAGK,QAAQ,CAAC9B,MAA5B,CAAoC,CAAC;AACrG,IAAK,GAAIZ,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGqC,gBAApB,CAAsCrC,CAAC,EAAvC,CAA2C,CACzCwC,KAAK,CAACE,QAAQ,CAAC1C,CAAD,CAAT,CAAL,CAAqByC,CAArB,CACAA,CAAC,CAAGA,CAAC,CAAG,CAAR,CACD,CACD1B,KAAK,CAACG,KAAD,CAAL,CAAesB,KAAf,CACD,CAVD,EAYA,IAAK,GAAIpC,CAAAA,GAAT,GAAgBW,CAAAA,KAAhB,CAAuB,CACrB,IAAK,GAAI6B,CAAAA,IAAT,GAAiB7B,CAAAA,KAAK,CAACX,GAAD,CAAtB,CAA6B,CAC3B,GAAImC,UAAU,CAACK,IAAD,CAAV,CAAmB,CAAvB,CAA0B,CAExBL,UAAU,CAACK,IAAD,CAAV,CAAmBL,UAAU,CAACK,IAAD,CAAV,CAAmB7B,KAAK,CAACX,GAAD,CAAL,CAAWwC,IAAX,CAAtC,CACD,CAHD,IAIK,CACHL,UAAU,CAACK,IAAD,CAAV,CAAmB7B,KAAK,CAACX,GAAD,CAAL,CAAWwC,IAAX,CAAnB,CACD,CACF,CACF,CACD/C,OAAO,CAACC,GAAR,CAAYyC,UAAZ,CAAuB,YAAvB,EACA,MAAOA,CAAAA,UAAP,CACD,CACD,MAAO,SAASI,CAAAA,eAAT,CAAyBT,OAAzB,CAAkChB,KAAlC,CAAyCkB,kBAAzC,CAA6DzC,aAA7D,CAA2E2C,SAA3E,CAAsF,CAAE;AAC7F,GAAI,CAACF,kBAAkB,CAACxB,MAApB,CAA6B,CAAjC,CAAoC,CAAE,MAAO,EAAP,CAAW,CACjDwB,kBAAkB,CAAGA,kBAAkB,CAAC7B,GAAnB,CAAuB,SAAAoB,OAAO,QAAIA,CAAAA,OAAO,CAAE,CAAb,EAA9B,CAArB,CACA,GAAIkB,CAAAA,yBAAyB,CAAG,EAAhC,CAAmCvC,KAAnC,CAAyCwC,IAAzC,CAA8CC,QAA9C,CAGA,GAAIC,CAAAA,kBAAkB,CAAGV,SAAS,CAACpB,KAAD,CAAT,CAAiB+B,MAAjB,CAAwB,SAAAtB,OAAO,CAAI,CAAE,GAAII,QAAQ,CAACJ,OAAO,CAAC,OAAD,CAAR,CAAR,EAA8BI,QAAQ,CAACpC,aAAD,CAA1C,CAA2D,CAAE,MAAOgC,CAAAA,OAAP,CAAgB,CAAE,CAApH,CAAzB,CACAmB,IAAI,CAAGV,kBAAkB,CAAC7B,GAAnB,CAAuB,SAAA2C,KAAK,QAAIF,CAAAA,kBAAkB,CAACE,KAAD,CAAtB,EAA5B,CAAP,CACAH,QAAQ,CAAG9C,MAAM,CAACC,IAAP,CAAY4C,IAAI,CAAC,CAAD,CAAhB,CAAX,CACA,GAAIK,CAAAA,oBAAoB,CAACJ,QAAQ,CAACE,MAAT,CAAgB,SAAAG,IAAI,QAAEA,CAAAA,IAAI,CAACvC,QAAL,CAAc,eAAd,CAAF,EAApB,CAAzB,CACAkC,QAAQ,CAACI,oBAAT,CACAL,IAAI,CAACvC,GAAL,CAAS,SAAA6C,IAAI,CAAI,CACfL,QAAQ,CAAC5C,OAAT,CAAiB,SAAAkD,QAAQ,CAAI,CAC3B,GAAIR,yBAAyB,CAACQ,QAAD,CAAzB,EAAuC,CAAvC,EAA4CR,yBAAyB,CAACQ,QAAD,CAAzB,CAAsC,CAAtF,CAAyF,CACvFR,yBAAyB,CAACQ,QAAD,CAAzB,CAAsCR,yBAAyB,CAACQ,QAAD,CAAzB,CAAuChD,UAAU,CAAC+C,IAAI,CAACC,QAAD,CAAL,CAAvF,CACD,CAFD,IAGK,CAAER,yBAAyB,CAACQ,QAAD,CAAzB,CAAsChD,UAAU,CAAC+C,IAAI,CAACC,QAAD,CAAL,CAAhD,CAAkE,CAC1E,CALD,EAMD,CAPD,EAQA;AACA;AACA/C,KAAK,CAAGL,MAAM,CAACC,IAAP,CAAY2C,yBAAZ,EAAuCtC,GAAvC,CAA2C,SAAUH,GAAV,CAAe,CAChE,MAAO,CAACA,GAAD,CAAMyC,yBAAyB,CAACzC,GAAD,CAA/B,CAAP,CACD,CAFO,CAAR,CAGA;AACAE,KAAK,CAACf,IAAN,CAAW,SAAUkB,KAAV,CAAiBC,MAAjB,CAAyB,CAClC,MAAOD,CAAAA,KAAK,CAAC,CAAD,CAAL,CAAWC,MAAM,CAAC,CAAD,CAAxB,CACD,CAFD,EAGA,GAAI4C,CAAAA,MAAM,CAAGhD,KAAK,CAACC,GAAN,CAAU,SAACoB,OAAD,QAAaA,CAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAX,CAAmB,eAAnB,CAAoC,EAApC,CAAb,EAAV,CAAb,CACA0B,MAAM,CAAGA,MAAM,CAACL,MAAP,CAAc,SAAAG,IAAI,QAAIA,CAAAA,IAAI,EAAI,OAAR,EAAmBA,IAAI,EAAE,OAA7B,EAAlB,CAAT,CACA;AACAvD,OAAO,CAACC,GAAR,CAAYwD,MAAZ,CAAmB,QAAnB,EACA,MAAOA,CAAAA,MAAP,CAAe;AACf;AACD,CAED,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,SAA3B,CAAqCpB,kBAArC,CAAyDzC,aAAzD,CAAwE,CAC7E,GAAI8D,CAAAA,aAAa,CAACD,SAAS,CAACP,MAAV,CAAiB,SAAAG,IAAI,QAAErB,CAAAA,QAAQ,CAACqB,IAAI,CAAC,OAAD,CAAL,CAAR,EAAyBzD,aAAzB,EAA0CyC,kBAAkB,CAACvB,QAAnB,CAA4BuC,IAAI,CAAC,cAAD,CAAhC,CAA5C,EAArB,CAAlB,CACA,GAAIM,CAAAA,YAAY,CAACzD,MAAM,CAACC,IAAP,CAAYuD,aAAa,CAAC,CAAD,CAAzB,EAA8BR,MAA9B,CAAqC,SAAAG,IAAI,QAAEA,CAAAA,IAAI,CAACvC,QAAL,CAAc,eAAd,CAAF,EAAzC,CAAjB,CAA4F;AAC5F,GAAIM,CAAAA,IAAI,CAAC,EAAT,CACAuC,YAAY,CAACnD,GAAb,CAAiB,SAAAoD,OAAO,CAAE,CACxB,GAAIC,CAAAA,CAAC,CAAC,CAAN,CACAH,aAAa,CAAClD,GAAd,CAAkB,SAAA6C,IAAI,CAAE,CACtBQ,CAAC,EAAEvD,UAAU,CAAC+C,IAAI,CAACO,OAAD,CAAL,CAAb,CACD,CAFD,EAGAxC,IAAI,CAACL,IAAL,CAAU,CAAC6C,OAAD,CAASC,CAAC,CAACxB,kBAAkB,CAACxB,MAA9B,CAAV,EACD,CAND,EAOF,MAAOO,CAAAA,IAAI,CAAC5B,IAAL,CAAU,SAACsE,CAAD,CAAGC,CAAH,QAAOA,CAAAA,CAAC,CAAC,CAAD,CAAD,CAAKD,CAAC,CAAC,CAAD,CAAb,EAAV,EAA4BtD,GAA5B,CAAgC,SAAA6C,IAAI,QAAIA,CAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQxB,OAAR,CAAgB,eAAhB,CAAiC,EAAjC,CAAJ,EAApC,CAAP,CACC","sourcesContent":["//------------------------------------------------------------------------------------------------- Sort Models\nexport function sort(type, state_range, default_models, selected_year, grouped_by_year_data) {\n  console.log(type, state_range, default_models, selected_year, grouped_by_year_data,'sort')\n  //------------Handle ndgc sorting\n  if (type == 'Discounted Cumulative Gain') {\n    var nDCG_dict = { \"ndcg_term_CordAscent\": 0, \"ndcg_term_LambdaMART\": 0, \"ndcg_term_LambdaRank\": 0, \"ndcg_term_LinearReg\": 0, \"ndcg_term_ListNet\": 0, \"ndcg_term_MART\": 0, \"ndcg_term_RandomFor\": 0, \"ndcg_term_RankBoost\": 0, \"ndcg_term_RankNet\": 0 }\n    for (var i = state_range[0]; i < state_range[1]; i++) {\n      Object.keys(nDCG_dict).forEach(key => {\n          nDCG_dict[key] = nDCG_dict[key] + parseFloat(grouped_by_year_data[selected_year][i][key])\n      })\n    }\n    //---- sort\n    var items = Object.keys(nDCG_dict).map(function (key) {\n      return [key.substring(10), nDCG_dict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ndcg = []\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ndcg.push(items[i][0])\n      }\n    }\n    var temp1={}\n    items.map(myitem=>{temp1[myitem[0]]=myitem[1]})\n    console.log(items)\n    return [temp_ndcg,temp1]\n  }\n  //----\n\n  //------------ Handle AP sorting\n  if (type == 'Average Precision') {\n    var mydict = {}\n    default_models.forEach((model) => {\n      var temp = 1\n      for (var i = state_range[0]; i < state_range[1]; i++) {\n        temp = temp + (grouped_by_year_data[selected_year][i][\"two_realRank\"] - grouped_by_year_data[selected_year][i][model]) ** 2\n      }\n      mydict[model] = ((state_range[1] - state_range[0]) + 1) / (Math.sqrt(temp))\n    })\n    //---- sort\n    var items = Object.keys(mydict).map(function (key) {\n      return [key, mydict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ap = []\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ap.push(items[i][0])\n      }\n    }\n    return [temp_ap,mydict]\n  }\n  //------------Handle Alphabatic sorting\n  if (type == 'Alphabetically') {\n    var temp=default_models.sort()\n    return [temp,[0]]\n  }\n}\nexport function groupby_year(original_data) {\n  var years = {}\n  var sparkline_data = {}\n  original_data.forEach(element => {\n    years[element['1-qid']] = []\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')] = []\n  });\n\n  original_data.forEach(element => {\n    var temp_dict = { year: parseInt(element['1-qid']), rank: parseInt(element['two_realRank']) }\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')].push(temp_dict)\n    years[element['1-qid']].push(element)\n  });\n  return { years: years, sparkline_data: sparkline_data };\n}\nexport function features_with_score(dataset, models, selected_instances, selected_year, number_of_charts, rank_data) {\n  //console.log(dataset, models, selected_instances, selected_year, number_of_charts, rank_data,\"abc\")\n  var temp1 = {}\n  var temp_final = {}\n  models.map(model => {\n    var temp2 = {}\n    var v = number_of_charts;\n    var top_nine = sorted_features(dataset, model, selected_instances, selected_year,rank_data)\n    if (top_nine.length < number_of_charts) { v = top_nine.length;; number_of_charts = top_nine.length } // This is because number of charts is calculated based on space but there are cases when we don't have that many features\n    for (var i = 0; i < number_of_charts; i++) {\n      temp2[top_nine[i]] = v;\n      v = v - 1\n    }\n    temp1[model] = temp2\n  });\n\n  for (var key in temp1) {\n    for (var key2 in temp1[key]) {\n      if (temp_final[key2] > 0) {\n\n        temp_final[key2] = temp_final[key2] + temp1[key][key2]\n      }\n      else {\n        temp_final[key2] = temp1[key][key2]\n      }\n    }\n  }\n  console.log(temp_final,\"temp_final\")\n  return temp_final;\n}\nexport function sorted_features(dataset, model, selected_instances, selected_year,rank_data) { // Uses feature rank to rank and return features name by removing the feature_rank string\n  if (!selected_instances.length > 0) { return [] }\n  selected_instances = selected_instances.map(element => element -1)\n  var tempvoted_data_with_score = {},items,data,features;\n  \n\n  var filtered_rank_data = rank_data[model].filter(element => { if (parseInt(element['1-qid']) == parseInt(selected_year)) { return element } })\n  data = selected_instances.map(index => filtered_rank_data[index])\n  features = Object.keys(data[0])\n  var my_features_rank_col=features.filter(item=>item.includes(\"_feature_rank\"))\n  features=my_features_rank_col\n  data.map(item => {\n    features.forEach(feauture => {\n      if (tempvoted_data_with_score[feauture] >= 0 || tempvoted_data_with_score[feauture] < 0) {\n        tempvoted_data_with_score[feauture] = tempvoted_data_with_score[feauture] + (parseFloat(item[feauture]))\n      }\n      else { tempvoted_data_with_score[feauture] = parseFloat(item[feauture]) }\n    })\n  })\n  //-----------------------------------------------------------------\n  // Create items array\n  items = Object.keys(tempvoted_data_with_score).map(function (key) {\n    return [key, tempvoted_data_with_score[key]];\n  });\n  // Sort the array based on the second element\n  items.sort(function (first, second) {\n    return first[1] - second[1];\n  });\n  var items2 = items.map((element) => element[0].replace(\"_feature_rank\", \"\"))\n  items2 = items2.filter(item => item != \"1-qid\" && item!=\"model\")\n  //console.log(data,selected_instances,filtered_rank_data,\"items2\")\n  console.log(items2,\"items2\")\n  return items2; // sorted items \n  //-----------------------------------------------------------------\n}\n\nexport function getSortedFeatures(lime_data,selected_instances, selected_year) {\n  var filtered_data=lime_data.filter(item=>parseInt(item['1-qid'])==selected_year && selected_instances.includes(item['two_realRank']))\n  var feature_cols=Object.keys(filtered_data[0]).filter(item=>item.includes(\"_contribution\")) //.map(item => item.replace(\"_contribution\", \"\"))\n  var temp=[]\n  feature_cols.map(feature=>{\n    var x=0\n    filtered_data.map(item=>{\n      x+=parseFloat(item[feature])\n    })\n    temp.push([feature,x/selected_instances.length])\n  })\nreturn temp.sort((a,b)=>b[1]-a[1]).map(item => item[0].replace(\"_contribution\", \"\"))\n}\n"]},"metadata":{},"sourceType":"module"}