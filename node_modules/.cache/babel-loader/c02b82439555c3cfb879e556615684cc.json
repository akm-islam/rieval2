{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Charts/Model/ModelChartComponent.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { connect } from \"react-redux\";\nimport * as deviation_chart from \"../DevPlot/deviation_chart\";\nimport * as misc_algo from '../../../Algorithms/misc_algo';\nimport * as $ from 'jquery';\nimport ModelSlider from './ModelSlider';\nimport ExpChart from './ExpChartComponent';\nimport './ModelSlider.scss';\nimport YearModelSelection from \"./YearAndModelSelection/YearModelSelection\";\nimport Grid from '@mui/material/Grid';\nimport Popover from '../Popover/01Popover';\n\nclass SlopeChart extends Component {\n  constructor(props) {\n    super(props);\n    this.line_color = null;\n    this.state = {\n      height_slope_exp_chart: 700,\n      mouseX: 0,\n      mouseY: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      width: window.innerHeight\n    });\n  }\n\n  shouldComponentUpdate(prevProps, prevState) {\n    return true;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    var self = this;\n    var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1);\n\n    if (this.props.histogram_data.length > 0) {\n      selected_instances = this.props.histogram_data;\n    } //--------------------\n\n\n    var min = d3.min(selected_instances),\n        max = d3.max(selected_instances);\n    var d = (max - min) / 8; //var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#af8dc3', '#dbd88c', '#7fbf7b']));\n\n    var diverginColor = d3.scaleDiverging([max, parseInt((max + min) / 2), min], d3.interpolateRgbBasis(['#b37cd3', '#d9d58c', '#71ce6c'])); //50% saturation\n    //-------------------- Threshold filter\n\n    var under_threshold_instances = [];\n    var year_data = this.props.original_data.filter(item => this.props.selected_year == item['1-qid']);\n    this.props.default_models.map(model_name => {\n      year_data.map(item => {\n        var two_realRank = parseInt(item['two_realRank']);\n        var predicted_rank = parseInt(item[model_name]);\n\n        if (Math.abs(predicted_rank - two_realRank) < this.props.threshold) {\n          under_threshold_instances.push(two_realRank);\n        }\n      });\n    });\n    selected_instances = selected_instances.filter(item => under_threshold_instances.includes(item));\n    deviation_chart.Create_deviation_chart('dev_plot_container_svg', 'exp', selected_instances, this.props.original_data, this.props.default_models, this.props.anim_config, this.props.selected_year, this.props.average_m, this.props.clicked_circles, this.props.Set_clicked_circles, diverginColor, this.props.sparkline_data, this.props.Set_selected_year, this.props.dataset, this.props.threshold);\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config); //-------------------------Handle model mousever start here \n\n    d3.selectAll(\".model_p\").on('mouseover', function () {\n      var selectedModel = d3.select(this).attr('modelName');\n\n      if (self.props.default_models.includes(selectedModel)) {\n        d3.selectAll('.dev_circles').attr('opacity', 0.1);\n        d3.selectAll('.' + selectedModel).attr('opacity', 1);\n      }\n    }).on('mouseout', function () {\n      d3.selectAll('.dev_circles').attr('opacity', 1);\n    }); //-------------------------Handle model mousever start here\n  }\n\n  render() {\n    var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1);\n\n    if (this.props.histogram_data.length > 0) {\n      selected_instances = this.props.histogram_data;\n    } //--------------------\n\n\n    var min = d3.min(selected_instances),\n        max = d3.max(selected_instances);\n    var d = (max - min) / 8; //var diverginColor = d3.scaleLinear().domain([min + d * 7, min + d * 6, min + d * 5, min + d * 4, min + d * 3, min + d * 2, min]).interpolate(d3.interpolateRgb).range(['#af8dc3','#b197c1','#dbd88c','#dbd88c', '#dbd88c', '#90bc8d', '#7fbf7b']);\n    //var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#af8dc3', '#dbd88c', '#7fbf7b']));\n    //var diverginColor = d3.scaleDiverging([min,(max - min) / 2 , max], d3.interpolateSpectral)\n\n    var diverginColor = d3.scaleDiverging([max, parseInt((max + min) / 2), min], d3.interpolateRgbBasis(['#b37cd3', '#d9d58c', '#71ce6c'])); //50% saturation\n\n    this.props.Set_selected_instances(selected_instances); //--------------------\n\n    var deviation_array = [];\n    this.props.default_models.map(model => {\n      this.props.lime_data[model].map(item => {\n        if (item['1-qid'] == this.props.selected_year && selected_instances.includes(parseInt(item['two_realRank']))) {\n          deviation_array.push(item['deviation']);\n        }\n      });\n    });\n    this.props.Set_deviation_array(deviation_array); //console.log('deviation_array: ', d3.extent(deviation_array))\n    //--------------------\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      className: \"ModelChartParent\",\n      container: true,\n      direction: \"row\",\n      justify: \"flex-start\",\n      alignItems: \"center\",\n      style: {\n        height: '100%',\n        width: '100%',\n        backgroundColor: 'white',\n        margin: 2,\n        padding: 2,\n        boxShadow: \"-2px 1px 4px -1px white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      className: \"left_container\",\n      style: {\n        width: 400,\n        backgroundColor: \"#fcfcfc\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"year_and_model_selector_and_slider_container\",\n      style: {\n        \"z-index\": 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \" \", /*#__PURE__*/React.createElement(YearModelSelection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ModelSlider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 54\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"deviation_plot_container_div\",\n      style: {\n        width: \"100%\",\n        height: $('.ModelChartParent').height() - $('.year_and_model_selector_and_slider_container').height(),\n        marginBottom: 0,\n        overflow: 'scroll'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      id: \"dev_plot_container_svg\",\n      style: {\n        width: \"100%\",\n        overflow: 'hidden'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }))), this.props.rank_data != null ? /*#__PURE__*/React.createElement(Grid, {\n      className: \"right_container\",\n      item: true,\n      container: true,\n      xs: true,\n      direction: \"row\",\n      columnSpacing: 1,\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, this.props.default_models.map((model_name, index) => {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12 / this.props.default_models.length,\n        style: {\n          height: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(ExpChart, {\n        diverginColor: diverginColor,\n        exp_id: \"exp\" + index,\n        default_models: this.props.default_models,\n        state_range: this.props.state_range,\n        selected_year: this.props.selected_year,\n        model_name: model_name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }));\n    })) : null, /*#__PURE__*/React.createElement(Popover, {\n      diverginColor: diverginColor,\n      default_models: this.props.default_models,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst maptstateToprop = state => {\n  return {\n    default_models: state.default_models,\n    histogram_data: state.histogram_data,\n    state_range: state.state_range,\n    selected_year: state.selected_year,\n    lime_data: state.lime_data,\n    default_models: state.default_models,\n    original_data: state.original_data,\n    dataset: state.dataset,\n    sparkline_data: state.sparkline_data,\n    dataset: state.dataset,\n    anim_config: state.anim_config,\n    average_m: state.average_m,\n    rank_data: state.rank_data,\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold\n  };\n};\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    Set_selected_instances: val => dispatch({\n      type: \"selected_instances\",\n      value: val\n    }),\n    Set_deviation_array: val => dispatch({\n      type: \"deviation_array\",\n      value: val\n    }),\n    Set_clicked_circles: val => dispatch({\n      type: \"clicked_circles\",\n      value: val\n    }),\n    Set_selected_year: val => dispatch({\n      type: \"selected_year\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(SlopeChart);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Model/ModelChartComponent.js"],"names":["React","Component","d3","connect","deviation_chart","misc_algo","$","ModelSlider","ExpChart","YearModelSelection","Grid","Popover","SlopeChart","constructor","props","line_color","state","height_slope_exp_chart","mouseX","mouseY","componentDidMount","setState","width","window","innerHeight","shouldComponentUpdate","prevProps","prevState","componentDidUpdate","self","selected_instances","range","state_range","histogram_data","length","min","max","d","diverginColor","scaleDiverging","parseInt","interpolateRgbBasis","under_threshold_instances","year_data","original_data","filter","item","selected_year","default_models","map","model_name","two_realRank","predicted_rank","Math","abs","threshold","push","includes","Create_deviation_chart","anim_config","average_m","clicked_circles","Set_clicked_circles","sparkline_data","Set_selected_year","dataset","handle_transparency","selectAll","on","selectedModel","select","attr","render","Set_selected_instances","deviation_array","model","lime_data","Set_deviation_array","height","backgroundColor","margin","padding","boxShadow","marginBottom","overflow","rank_data","index","maptstateToprop","mapdispatchToprop","dispatch","val","type","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { connect } from \"react-redux\";\nimport * as deviation_chart from \"../DevPlot/deviation_chart\"\nimport * as misc_algo from '../../../Algorithms/misc_algo'\nimport * as $ from 'jquery';\nimport ModelSlider from './ModelSlider';\nimport ExpChart from './ExpChartComponent';\nimport './ModelSlider.scss';\nimport YearModelSelection from \"./YearAndModelSelection/YearModelSelection\"\nimport Grid from '@mui/material/Grid';\nimport Popover from '../Popover/01Popover';\nclass SlopeChart extends Component {\n  constructor(props) {\n    super(props);\n    this.line_color = null;\n    this.state = { height_slope_exp_chart: 700, mouseX: 0, mouseY: 0 }\n  }\n  componentDidMount() { this.setState({ width: window.innerHeight }) }\n  shouldComponentUpdate(prevProps, prevState) { return true; }\n  componentDidUpdate(prevProps, prevState) {\n    var self=this\n    var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1)\n    if (this.props.histogram_data.length > 0) { selected_instances = this.props.histogram_data }\n\n    //--------------------\n    var min = d3.min(selected_instances), max = d3.max(selected_instances);\n    var d = (max - min) / 8;\n    //var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#af8dc3', '#dbd88c', '#7fbf7b']));\n    var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#b37cd3', '#d9d58c', '#71ce6c'])); //50% saturation\n    \n    //-------------------- Threshold filter\n    var under_threshold_instances = []\n    var year_data = this.props.original_data.filter(item => this.props.selected_year == item['1-qid'])\n    this.props.default_models.map(model_name => {\n      year_data.map(item => {\n        var two_realRank = parseInt(item['two_realRank'])\n        var predicted_rank = parseInt(item[model_name])\n        if (Math.abs(predicted_rank - two_realRank) < this.props.threshold) {\n          under_threshold_instances.push(two_realRank)\n        }\n      })\n    })\n    selected_instances = selected_instances.filter(item => under_threshold_instances.includes(item))\n    deviation_chart.Create_deviation_chart('dev_plot_container_svg', 'exp', selected_instances, this.props.original_data, this.props.default_models, this.props.anim_config, this.props.selected_year, this.props.average_m, this.props.clicked_circles, this.props.Set_clicked_circles, diverginColor, this.props.sparkline_data, this.props.Set_selected_year, this.props.dataset, this.props.threshold)\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config)\n    \n    //-------------------------Handle model mousever start here \n    d3.selectAll(\".model_p\").on('mouseover',function(){\n      var selectedModel=d3.select(this).attr('modelName')\n      if(self.props.default_models.includes(selectedModel)){\n        d3.selectAll('.dev_circles').attr('opacity',0.1)\n        d3.selectAll('.'+selectedModel).attr('opacity',1)  \n      }\n    })\n    .on('mouseout',function(){\n      d3.selectAll('.dev_circles').attr('opacity',1)\n    })\n  //-------------------------Handle model mousever start here\n  \n  }\n  render() {\n    var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1)\n    if (this.props.histogram_data.length > 0) { selected_instances = this.props.histogram_data }\n    //--------------------\n    var min = d3.min(selected_instances), max = d3.max(selected_instances);\n    var d = (max - min) / 8;\n    //var diverginColor = d3.scaleLinear().domain([min + d * 7, min + d * 6, min + d * 5, min + d * 4, min + d * 3, min + d * 2, min]).interpolate(d3.interpolateRgb).range(['#af8dc3','#b197c1','#dbd88c','#dbd88c', '#dbd88c', '#90bc8d', '#7fbf7b']);\n    //var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#af8dc3', '#dbd88c', '#7fbf7b']));\n    //var diverginColor = d3.scaleDiverging([min,(max - min) / 2 , max], d3.interpolateSpectral)\n    var diverginColor = d3.scaleDiverging([max, parseInt((max+min)/2), min], d3.interpolateRgbBasis(['#b37cd3', '#d9d58c', '#71ce6c'])); //50% saturation\n    this.props.Set_selected_instances(selected_instances)\n    //--------------------\n    var deviation_array = []\n    this.props.default_models.map(model => {\n      this.props.lime_data[model].map(item => {\n        if (item['1-qid'] == this.props.selected_year && selected_instances.includes(parseInt(item['two_realRank']))) {\n          deviation_array.push(item['deviation'])\n        }\n      })\n    })\n    this.props.Set_deviation_array(deviation_array)\n    //console.log('deviation_array: ', d3.extent(deviation_array))\n    //--------------------\n    return (\n      <Grid className=\"ModelChartParent\" container direction=\"row\" justify=\"flex-start\" alignItems=\"center\" style={{ height: '100%', width: '100%', backgroundColor: 'white', margin: 2, padding: 2, boxShadow: \"-2px 1px 4px -1px white\" }}> {/* This model chart's height and width is the parent*/}\n        <Grid item className=\"left_container\" style={{width:400, backgroundColor: \"#fcfcfc\" }}>\n          {/* The deviation plot container starts below */}\n          <div className=\"year_and_model_selector_and_slider_container\" style={{\"z-index\":1}}> {/* This is used to calculate the deviation plot height */}\n            <YearModelSelection></YearModelSelection><ModelSlider></ModelSlider>\n          </div>\n          {/* The deviation plot container starts below */}\n          <div class=\"deviation_plot_container_div\" style={{ width: \"100%\", height: $('.ModelChartParent').height() - $('.year_and_model_selector_and_slider_container').height(), marginBottom: 0, overflow: 'scroll' }}>\n            <svg id=\"dev_plot_container_svg\" style={{ width: \"100%\", overflow: 'hidden' }}></svg>\n          </div>\n          {/* The deviation plot container ends here */}\n        </Grid>\n        {/* The explanation plot container starts below */}\n        {this.props.rank_data != null ?\n          <Grid className=\"right_container\" item container xs direction=\"row\" columnSpacing={1} style={{ height: '100%'}}>\n              {\n                this.props.default_models.map((model_name, index) => {\n                  return <Grid item xs={12/this.props.default_models.length} style={{height: \"100%\"}}>\n                    <ExpChart diverginColor={diverginColor} exp_id={\"exp\" + index} default_models={this.props.default_models} state_range={this.props.state_range} selected_year={this.props.selected_year} model_name={model_name}></ExpChart>\n                  </Grid>\n                })\n              }\n            \n          </Grid> : null}\n        {/* The explanation plot container ends here */}\n        <Popover diverginColor={diverginColor} default_models={this.props.default_models}></Popover>\n      </Grid>\n    )\n  }\n}\nconst maptstateToprop = (state) => {\n  return {\n    default_models: state.default_models,\n    histogram_data: state.histogram_data,\n    state_range: state.state_range,\n    selected_year: state.selected_year,\n    lime_data: state.lime_data,\n    default_models: state.default_models,\n    original_data: state.original_data,\n    dataset: state.dataset,\n    sparkline_data: state.sparkline_data,\n    dataset: state.dataset,\n    anim_config: state.anim_config,\n    average_m: state.average_m,\n    rank_data: state.rank_data,\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold\n  }\n}\nconst mapdispatchToprop = (dispatch) => {\n  return {\n    Set_selected_instances: (val) => dispatch({ type: \"selected_instances\", value: val }),\n    Set_deviation_array: (val) => dispatch({ type: \"deviation_array\", value: val }),\n    Set_clicked_circles: (val) => dispatch({ type: \"clicked_circles\", value: val }),\n    Set_selected_year: (val) => dispatch({ type: \"selected_year\", value: val }),\n  }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(SlopeChart);"]},"metadata":{},"sourceType":"module"}