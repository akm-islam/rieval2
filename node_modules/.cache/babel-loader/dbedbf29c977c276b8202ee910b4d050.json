{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Charts/Time/03TimePopover.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport Chart_pop from './04PopoverCharts';\nimport Draggable from 'react-draggable';\nimport Grid from '@mui/material/Grid';\nimport * as d3 from 'd3';\nexport function SimplePopover(props) {\n  const handleClose = () => {\n    props.set_pop_over(false);\n    props.set_dbclicked_features([]);\n  }; //------------------------------\n\n\n  var selected_instances = d3.range(props.time_mode_range[0], props.time_mode_range[1] + 1);\n  var min = d3.min(selected_instances),\n      max = d3.max(selected_instances);\n  var d = (max - min) / 8;\n  var diverginColor = d3.scaleLinear().domain([min + d * 7, min + d * 6, min + d * 5, min + d * 4, min + d * 3, min + d * 2, min]).interpolate(d3.interpolateRgb).range(['#af8dc3', '#b197c1', '#dbd88c', '#dbd88c', '#dbd88c', '#90bc8d', '#7fbf7b']); //----------\n\n  var under_threshold_instances = [];\n  var year_data = props.original_data.filter(item => props.time_mode_year1 == item['1-qid']);\n  year_data.map(item => {\n    var two_realRank = parseInt(item['two_realRank']);\n    var predicted_rank = parseInt(item[props.time_mode_model]);\n\n    if (Math.abs(predicted_rank - two_realRank) < props.threshold) {\n      under_threshold_instances.push(two_realRank);\n    }\n  });\n  var selected_instances1 = selected_instances.filter(item => under_threshold_instances.includes(item));\n  var data1 = props.lime_data[props.time_mode_model].filter(element => parseInt(element['1-qid']) == parseInt(props.time_mode_year1) && selected_instances1.includes(parseInt(element['two_realRank']))); //------------------------------\n\n  var under_threshold_instances = [];\n  var year_data = props.original_data.filter(item => props.time_mode_year2 == item['1-qid']);\n  year_data.map(item => {\n    var two_realRank = parseInt(item['two_realRank']);\n    var predicted_rank = parseInt(item[props.time_mode_model]);\n\n    if (Math.abs(predicted_rank - two_realRank) < props.threshold) {\n      under_threshold_instances.push(two_realRank);\n    }\n  });\n  var selected_instances2 = selected_instances.filter(item => under_threshold_instances.includes(item));\n  var data2 = props.lime_data[props.time_mode_model].filter(element => parseInt(element['1-qid']) == parseInt(props.time_mode_year2) && selected_instances2.includes(parseInt(element['two_realRank'])));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pop_over\",\n    style: {\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, props.pop_over == true ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      top: \"2%\",\n      left: \"14%\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      backgroundColor: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Draggable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    style: {\n      backgroundColor: \"#ffffff\",\n      boxShadow: \"3px 2px 15px -7px #000000\",\n      pointerEvents: \"auto\",\n      display: \"relative\",\n      zIndex: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    style: {\n      borderBottom: \"1px solid #e2e2e2\",\n      marginBottom: 20\n    },\n    direction: \"row\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    id: \"draggable-dialog-title\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }\n  }, \"close\")), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      maxHeight: 700,\n      overflow: \"scroll\",\n      maxWidth: 1600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }\n  }, props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 121\n    }\n  }, /*#__PURE__*/React.createElement(Chart_pop, {\n    index: index,\n    group: \"Year 1 : \" + props.time_mode_year1,\n    popup_chart_data: [data1, item],\n    default_models: props.default_models,\n    myid: item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '') + \"range1\",\n    diverginColor: props.diverginColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 159\n    }\n  }), /*#__PURE__*/React.createElement(Chart_pop, {\n    index: index,\n    group: \"Year 2 : \" + props.time_mode_year2,\n    popup_chart_data: [data2, item],\n    default_models: props.default_models,\n    myid: item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '') + \"range2\",\n    diverginColor: props.diverginColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 41\n    }\n  }))) : /*#__PURE__*/React.createElement(Chart_pop, {\n    popup_chart_data: data1,\n    default_models: props.default_models,\n    myid: \"myid1\",\n    diverginColor: props.diverginColor,\n    textClickHandler_original: props.textClickHandler_original,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 41\n    }\n  }))))) : null);\n}\n\nconst maptstateToprop = state => {\n  return {\n    time_mode_year1: state.time_mode_year1,\n    time_mode_year2: state.time_mode_year2,\n    time_mode_model: state.time_mode_model,\n    time_mode_range: state.time_mode_range,\n    popup_chart_data: state.popup_chart_data,\n    pop_over: state.pop_over,\n    dbclicked_features: state.dbclicked_features,\n    selected_year: state.selected_year,\n    threshold: state.threshold,\n    original_data: state.original_data,\n    lime_data: state.lime_data,\n    histogram_data: state.histogram_data\n  };\n};\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    set_pop_over: val => dispatch({\n      type: \"pop_over\",\n      value: val\n    }),\n    set_dbclicked_features: val => dispatch({\n      type: \"dbclicked_features\",\n      value: val\n    }),\n    set_clicked_features: val => dispatch({\n      type: \"clicked_features\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(SimplePopover);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Time/03TimePopover.js"],"names":["React","Button","connect","Chart_pop","Draggable","Grid","d3","SimplePopover","props","handleClose","set_pop_over","set_dbclicked_features","selected_instances","range","time_mode_range","min","max","d","diverginColor","scaleLinear","domain","interpolate","interpolateRgb","under_threshold_instances","year_data","original_data","filter","item","time_mode_year1","map","two_realRank","parseInt","predicted_rank","time_mode_model","Math","abs","threshold","push","selected_instances1","includes","data1","lime_data","element","time_mode_year2","selected_instances2","data2","position","pop_over","top","left","pointerEvents","backgroundColor","boxShadow","display","zIndex","borderBottom","marginBottom","maxHeight","overflow","maxWidth","dbclicked_features","length","index","default_models","replace","textClickHandler_original","maptstateToprop","state","popup_chart_data","selected_year","histogram_data","mapdispatchToprop","dispatch","val","type","value","set_clicked_features"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport Chart_pop from './04PopoverCharts'\nimport Draggable from 'react-draggable';\nimport Grid from '@mui/material/Grid';\nimport * as d3 from 'd3';\nexport function SimplePopover(props) {\n    const handleClose = () => {\n        props.set_pop_over(false)\n        props.set_dbclicked_features([])\n    };\n    //------------------------------\n    var selected_instances = d3.range(props.time_mode_range[0], props.time_mode_range[1] + 1)\n    var min = d3.min(selected_instances), max = d3.max(selected_instances);\n    var d = (max - min) / 8;\n    var diverginColor = d3.scaleLinear().domain([min + d * 7, min + d * 6, min + d * 5, min + d * 4, min + d * 3, min + d * 2, min]).interpolate(d3.interpolateRgb).range(['#af8dc3','#b197c1','#dbd88c','#dbd88c', '#dbd88c', '#90bc8d', '#7fbf7b']);\n\n    //----------\n    var under_threshold_instances = []\n    var year_data = props.original_data.filter(item => props.time_mode_year1 == item['1-qid'])\n    year_data.map(item => {\n        var two_realRank = parseInt(item['two_realRank'])\n        var predicted_rank = parseInt(item[props.time_mode_model])\n        if (Math.abs(predicted_rank - two_realRank) < props.threshold) {\n            under_threshold_instances.push(two_realRank)\n        }\n    })\n    var selected_instances1 = selected_instances.filter(item => under_threshold_instances.includes(item))\n    var data1 = props.lime_data[props.time_mode_model].filter(element => parseInt(element['1-qid']) == parseInt(props.time_mode_year1) && selected_instances1.includes(parseInt(element['two_realRank'])))\n    //------------------------------\n    var under_threshold_instances = []\n    var year_data = props.original_data.filter(item => props.time_mode_year2 == item['1-qid'])\n    year_data.map(item => {\n        var two_realRank = parseInt(item['two_realRank'])\n        var predicted_rank = parseInt(item[props.time_mode_model])\n        if (Math.abs(predicted_rank - two_realRank) < props.threshold) {\n            under_threshold_instances.push(two_realRank)\n        }\n    })\n    var selected_instances2 = selected_instances.filter(item => under_threshold_instances.includes(item))\n    var data2 = props.lime_data[props.time_mode_model].filter(element => parseInt(element['1-qid']) == parseInt(props.time_mode_year2) && selected_instances2.includes(parseInt(element['two_realRank'])))\n\n    return (\n        <div className=\"pop_over\" style={{ position: \"relative\" }}>\n            {props.pop_over == true ?\n                <div style={{ top: \"2%\", left: \"14%\", position: \"fixed\", pointerEvents: \"none\", backgroundColor: \"transparent\" }}>\n                    <Draggable>\n                        <Grid style={{ backgroundColor: \"#ffffff\", boxShadow: \"3px 2px 15px -7px #000000\", pointerEvents: \"auto\", display: \"relative\", zIndex: 6 }}>\n                            <Grid container style={{ borderBottom: \"1px solid #e2e2e2\", marginBottom: 20 }} direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" >\n                                <Button color=\"secondary\" id=\"draggable-dialog-title\" onClick={handleClose}>close</Button>\n                            </Grid>\n                            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ maxHeight: 700, overflow: \"scroll\", maxWidth: 1600 }}>\n                                {\n                                    props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => <Grid item container direction=\"row\" ><Chart_pop\n                                        index={index} group={\"Year 1 : \"+props.time_mode_year1}\n                                        popup_chart_data={[data1, item]} default_models={props.default_models}\n                                        myid={item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '') + \"range1\"} diverginColor={props.diverginColor}\n                                    ></Chart_pop>\n                                        <Chart_pop\n                                            index={index} group={\"Year 2 : \"+props.time_mode_year2}\n                                            popup_chart_data={[data2, item]} default_models={props.default_models}\n                                            myid={item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '') + \"range2\"} diverginColor={props.diverginColor}\n                                        ></Chart_pop></Grid>\n                                    ) : <Chart_pop popup_chart_data={data1} default_models={props.default_models} myid=\"myid1\" diverginColor={props.diverginColor} textClickHandler_original={props.textClickHandler_original}></Chart_pop>\n                                }\n                            </Grid>\n                        </Grid>\n                    </Draggable>\n                </div> : null}\n        </div>\n    );\n}\nconst maptstateToprop = (state) => {\n    return {\n        time_mode_year1: state.time_mode_year1,\n        time_mode_year2: state.time_mode_year2,\n        time_mode_model: state.time_mode_model,\n        time_mode_range: state.time_mode_range,\n        popup_chart_data: state.popup_chart_data,\n        pop_over: state.pop_over,\n        dbclicked_features: state.dbclicked_features,\n        selected_year: state.selected_year,\n        threshold: state.threshold,\n        original_data: state.original_data,\n        lime_data: state.lime_data,\n        histogram_data: state.histogram_data,\n    }\n}\nconst mapdispatchToprop = (dispatch) => {\n    return {\n        set_pop_over: (val) => dispatch({ type: \"pop_over\", value: val }),\n        set_dbclicked_features: (val) => dispatch({ type: \"dbclicked_features\", value: val }),\n        set_clicked_features: (val) => dispatch({ type: \"clicked_features\", value: val }),\n    }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(SimplePopover);\n"]},"metadata":{},"sourceType":"module"}