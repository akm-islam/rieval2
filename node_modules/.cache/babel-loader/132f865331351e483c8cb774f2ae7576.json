{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Charts/Range/04PopoverCharts.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as misc_algo from \"../../../Algorithms/misc_algo\";\nimport CreateCatChart from '../Popover/CreateCatChart';\nimport CreateNumChart from '../Popover/CreateNumChart';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.setState({\n      a: 5\n    });\n  }\n\n  componentDidUpdate() {\n    var merged_arr = this.props.popup_chart_data[0]; // only data\n\n    var scatterplot_data = [[this.props.popup_chart_data[1], this.props.popup_chart_data[0]]]; // [feature name, data]\n    //----------------------------------------------------------------------------------------------------------Call createChart\n\n    if (merged_arr.length > 0) {\n      // This is to avoid the error caused by the next line\n      if (isNaN(merged_arr[0][this.props.popup_chart_data[1]])) {\n        CreateCatChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array);\n      } else {\n        CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array);\n      }\n    } else {\n      CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array); // calling the function to set the  graph empty when all models are unselected\n    }\n\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.props.popup_chart_data[1],\n      style: {\n        margin: 10,\n        padding: 10,\n        border: this.props.index == 0 ? \"3px solid #e5e5e5\" : \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"#4f4c4c\",\n        marginLeft: \"42%\",\n        marginTop: 0,\n        marginBottom: 5,\n        fontWeight: 600\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, this.props.group), /*#__PURE__*/React.createElement(\"svg\", {\n      id: this.props.myid,\n      style: {\n        marginTop: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"#4f4c4c\",\n        marginLeft: \"42%\",\n        marginTop: -25,\n        marginBottom: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, this.props.popup_chart_data[1]));\n  }\n\n}\n\nconst maptstateToprop = state => {\n  return {\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold,\n    anim_config: state.anim_config,\n    deviation_array: state.deviation_array\n  };\n}; //item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    Set_clicked_circles: val => dispatch({\n      type: \"clicked_circles\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(Chart);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Range/04PopoverCharts.js"],"names":["React","Component","connect","misc_algo","CreateCatChart","CreateNumChart","Chart","constructor","props","componentDidMount","setState","a","componentDidUpdate","merged_arr","popup_chart_data","scatterplot_data","length","isNaN","deviation_array","handle_transparency","clicked_circles","anim_config","render","margin","padding","border","index","color","marginLeft","marginTop","marginBottom","fontWeight","group","myid","maptstateToprop","state","threshold","mapdispatchToprop","dispatch","Set_clicked_circles","val","type","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as misc_algo from \"../../../Algorithms/misc_algo\"\nimport CreateCatChart from '../Popover/CreateCatChart'\nimport CreateNumChart from '../Popover/CreateNumChart'\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.setState({ a: 5 })\n  }\n  componentDidUpdate() {\n    var merged_arr = this.props.popup_chart_data[0] // only data\n    var scatterplot_data = [[this.props.popup_chart_data[1], this.props.popup_chart_data[0]]] // [feature name, data]\n    //----------------------------------------------------------------------------------------------------------Call createChart\n    if (merged_arr.length > 0) { // This is to avoid the error caused by the next line\n      if (isNaN(merged_arr[0][this.props.popup_chart_data[1]])) {\n        CreateCatChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array)\n      }\n      else {\n        CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array)\n      }\n    }\n    else {\n      CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array) // calling the function to set the  graph empty when all models are unselected\n    }\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config)\n  }\n\n  render() {\n    return (\n      <div key={this.props.popup_chart_data[1]} style={{ margin: 10, padding: 10, border: this.props.index == 0 ? \"3px solid #e5e5e5\" : \"white\" }}>\n        <p style={{ color: \"#4f4c4c\", marginLeft: \"42%\", marginTop: 0, marginBottom: 5,fontWeight:600 }}>{this.props.group}</p>\n        <svg id={this.props.myid} style={{ marginTop: 10 }}> </svg>\n        <p style={{ color: \"#4f4c4c\", marginLeft: \"42%\", marginTop: -25, marginBottom: 0 }}>{this.props.popup_chart_data[1]}</p>\n      </div>\n    );\n  }\n}\nconst maptstateToprop = (state) => {\n  return {\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold,\n    anim_config: state.anim_config,\n    deviation_array: state.deviation_array,\n  }\n}\n//item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\nconst mapdispatchToprop = (dispatch) => {\n  return {\n    Set_clicked_circles: (val) => dispatch({ type: \"clicked_circles\", value: val }),\n  }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(Chart);"]},"metadata":{},"sourceType":"module"}