{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Charts/Popover/02Charts.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as misc_algo from '../../../Algorithms/misc_algo';\nimport CreateCatChart from './CreateCatChart';\nimport CreateNumChart from './CreateNumChart';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.setState({\n      a: 5\n    });\n  }\n\n  componentDidUpdate() {\n    var temp_dict = {};\n    this.props.default_models.filter(item => item != \"ListNet\").map(model => {\n      temp_dict[model] = this.props.popup_chart_data[0][model].filter(item => item['deviation'] < this.props.threshold).map(item => {\n        //item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n        item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\");\n        return item;\n      });\n    });\n    var merged_arr = [].concat.apply([], Object.values(temp_dict));\n    var scatterplot_data = Object.entries(this.props.popup_chart_data[0]).filter(item => this.props.pop_over_models.includes(item[0])); //----------------------------------------------------------------------------------------------------------Call createChart\n\n    if (merged_arr.length > 0) {\n      // This is to avoid the error caused by the next line\n      if (isNaN(merged_arr[0][this.props.popup_chart_data[1]])) {\n        CreateCatChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array);\n      } else {\n        CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array);\n      }\n    } else {\n      CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data, this.props, this.props.deviation_array); // calling the function to set the  graph empty when all models are unselected\n    }\n\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.props.popup_chart_data[1],\n      style: {\n        margin: 10,\n        padding: 10,\n        border: this.props.index == 0 ? \"3px solid #e5e5e5\" : \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      id: this.props.myid,\n      className: \"pop_over\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"#4f4c4c\",\n        marginLeft: \"42%\",\n        marginTop: -25,\n        marginBottom: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, this.props.popup_chart_data[1]));\n  }\n\n}\n\nconst maptstateToprop = state => {\n  return {\n    //popup_chart_data: state.popup_chart_data,\n    pop_over_models: state.pop_over_models,\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold,\n    anim_config: state.anim_config,\n    deviation_array: state.deviation_array\n  };\n}; //item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    Set_clicked_circles: val => dispatch({\n      type: \"clicked_circles\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(Chart);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Popover/02Charts.js"],"names":["React","Component","connect","misc_algo","CreateCatChart","CreateNumChart","Chart","constructor","props","componentDidMount","setState","a","componentDidUpdate","temp_dict","default_models","filter","item","map","model","popup_chart_data","threshold","replace","merged_arr","concat","apply","Object","values","scatterplot_data","entries","pop_over_models","includes","length","isNaN","deviation_array","handle_transparency","clicked_circles","anim_config","render","margin","padding","border","index","myid","color","marginLeft","marginTop","marginBottom","maptstateToprop","state","mapdispatchToprop","dispatch","Set_clicked_circles","val","type","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as misc_algo from '../../../Algorithms/misc_algo'\nimport CreateCatChart from './CreateCatChart'\nimport CreateNumChart from './CreateNumChart'\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.setState({ a: 5 })\n  }\n  componentDidUpdate() {\n    var temp_dict = {}\n    this.props.default_models.filter(item => item != \"ListNet\").map(model => {\n      temp_dict[model] = this.props.popup_chart_data[0][model].filter(item=>item['deviation']<this.props.threshold).map(item=>{\n        //item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n        item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n        return item\n      })\n    })\n    var merged_arr = [].concat.apply([], Object.values(temp_dict))\n    var scatterplot_data = Object.entries(this.props.popup_chart_data[0]).filter(item => this.props.pop_over_models.includes(item[0]))\n    //----------------------------------------------------------------------------------------------------------Call createChart\n    if (merged_arr.length > 0) { // This is to avoid the error caused by the next line\n      if (isNaN(merged_arr[0][this.props.popup_chart_data[1]])) {\n        CreateCatChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array)\n      }\n      else {\n        CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array)\n      }\n    }\n    else {\n      CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array) // calling the function to set the  graph empty when all models are unselected\n    }\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config)\n  }\n\n  render() {\n    return (\n      <div key={this.props.popup_chart_data[1]} style={{ margin: 10, padding: 10, border: this.props.index == 0 ? \"3px solid #e5e5e5\" : \"white\" }}>\n        <svg id={this.props.myid} className=\"pop_over\"> </svg>\n        <p style={{ color: \"#4f4c4c\", marginLeft: \"42%\", marginTop: -25, marginBottom: 0 }}>{this.props.popup_chart_data[1]}</p>\n      </div>\n    );\n  }\n}\nconst maptstateToprop = (state) => {\n  return {\n    //popup_chart_data: state.popup_chart_data,\n    pop_over_models: state.pop_over_models,\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold,\n    anim_config:state.anim_config,\n    deviation_array: state.deviation_array,\n  }\n}\n//item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\nconst mapdispatchToprop = (dispatch) => {\n  return {\n    Set_clicked_circles: (val) => dispatch({ type: \"clicked_circles\", value: val }),\n  }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(Chart);"]},"metadata":{},"sourceType":"module"}