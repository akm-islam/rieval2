{"ast":null,"code":"//------------------------------------------------------------------------------------------------- Sort Models\nexport function sort(type, state_range, default_models, selected_year, grouped_by_year_data) {\n  console.log(type, state_range, default_models, selected_year, grouped_by_year_data, 'sort'); //------------Handle ndgc sorting\n\n  if (type == 'Discounted Cumulative Gain') {\n    var nDCG_dict = {\n      \"ndcg_term_CordAscent\": 0,\n      \"ndcg_term_LambdaMART\": 0,\n      \"ndcg_term_LambdaRank\": 0,\n      \"ndcg_term_LinearReg\": 0,\n      \"ndcg_term_ListNet\": 0,\n      \"ndcg_term_MART\": 0,\n      \"ndcg_term_RandomFor\": 0,\n      \"ndcg_term_RankBoost\": 0,\n      \"ndcg_term_RankNet\": 0\n    };\n\n    for (var i = state_range[0]; i < state_range[1]; i++) {\n      Object.keys(nDCG_dict).forEach(key => {\n        nDCG_dict[key] = nDCG_dict[key] + parseFloat(grouped_by_year_data[selected_year][i][key]);\n      });\n    } //---- sort\n\n\n    var items = Object.keys(nDCG_dict).map(function (key) {\n      return [key.substring(10), nDCG_dict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ndcg = [];\n\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ndcg.push(items[i][0]);\n      }\n    }\n\n    var temp1 = {};\n    items.map(myitem => {\n      temp1[myitem[0]] = myitem[1];\n    });\n    console.log(items);\n    return [temp_ndcg, temp1];\n  } //----\n  //------------ Handle AP sorting\n\n\n  if (type == 'Average Precision') {\n    var mydict = {};\n    default_models.forEach(model => {\n      var temp = 1;\n\n      for (var i = state_range[0]; i < state_range[1]; i++) {\n        temp = temp + (grouped_by_year_data[selected_year][i][\"two_realRank\"] - grouped_by_year_data[selected_year][i][model]) ** 2;\n      }\n\n      mydict[model] = (state_range[1] - state_range[0] + 1) / Math.sqrt(temp);\n    }); //---- sort\n\n    var items = Object.keys(mydict).map(function (key) {\n      return [key, mydict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ap = [];\n\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ap.push(items[i][0]);\n      }\n    }\n\n    return [temp_ap, mydict];\n  } //------------Handle Alphabatic sorting\n\n\n  if (type == 'Alphabetically') {\n    var temp = default_models.sort();\n    return [temp, [0]];\n  }\n}\nexport function groupby_year(original_data) {\n  var years = {};\n  var sparkline_data = {};\n  original_data.forEach(element => {\n    years[element['1-qid']] = [];\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')] = [];\n  });\n  original_data.forEach(element => {\n    var temp_dict = {\n      year: parseInt(element['1-qid']),\n      rank: parseInt(element['two_realRank'])\n    };\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')].push(temp_dict);\n    years[element['1-qid']].push(element);\n  });\n  return {\n    years: years,\n    sparkline_data: sparkline_data\n  };\n}\nexport function features_with_score(dataset, models, selected_instances, selected_year, number_of_charts, rank_data) {\n  //console.log(dataset, models, selected_instances, selected_year, number_of_charts, rank_data,\"abc\")\n  var temp1 = {};\n  var temp_final = {};\n  models.map(model => {\n    var temp2 = {};\n    var v = number_of_charts;\n    var top_nine = sorted_features(dataset, model, selected_instances, selected_year, rank_data);\n\n    if (top_nine.length < number_of_charts) {\n      v = top_nine.length;\n      ;\n      number_of_charts = top_nine.length;\n    } // This is because number of charts is calculated based on space but there are cases when we don't have that many features\n\n\n    for (var i = 0; i < number_of_charts; i++) {\n      temp2[top_nine[i]] = v;\n      v = v - 1;\n    }\n\n    temp1[model] = temp2;\n  });\n\n  for (var key in temp1) {\n    for (var key2 in temp1[key]) {\n      if (temp_final[key2] > 0) {\n        temp_final[key2] = temp_final[key2] + temp1[key][key2];\n      } else {\n        temp_final[key2] = temp1[key][key2];\n      }\n    }\n  }\n\n  console.log(temp_final, \"temp_final\");\n  return temp_final;\n}\nexport function sorted_features(dataset, model, selected_instances, selected_year, rank_data) {\n  // Uses feature rank to rank and return features name by removing the feature_rank string\n  if (!selected_instances.length > 0) {\n    return [];\n  }\n\n  selected_instances = selected_instances.map(element => element - 1);\n  var tempvoted_data_with_score = {},\n      items,\n      data,\n      features;\n  var filtered_rank_data = rank_data[model].filter(element => {\n    if (parseInt(element['1-qid']) == parseInt(selected_year)) {\n      return element;\n    }\n  });\n  data = selected_instances.map(index => filtered_rank_data[index]);\n  features = Object.keys(data[0]);\n  var my_features_rank_col = features.filter(item => item.includes(\"_feature_rank\"));\n  features = my_features_rank_col;\n  data.map(item => {\n    features.forEach(feauture => {\n      if (tempvoted_data_with_score[feauture] >= 0 || tempvoted_data_with_score[feauture] < 0) {\n        tempvoted_data_with_score[feauture] = tempvoted_data_with_score[feauture] + parseFloat(item[feauture]);\n      } else {\n        tempvoted_data_with_score[feauture] = parseFloat(item[feauture]);\n      }\n    });\n  }); //-----------------------------------------------------------------\n  // Create items array\n\n  items = Object.keys(tempvoted_data_with_score).map(function (key) {\n    return [key, tempvoted_data_with_score[key]];\n  }); // Sort the array based on the second element\n\n  items.sort(function (first, second) {\n    return first[1] - second[1];\n  });\n  var items2 = items.map(element => element[0].replace(\"_feature_rank\", \"\"));\n  items2 = items2.filter(item => item != \"1-qid\" && item != \"model\"); //console.log(data,selected_instances,filtered_rank_data,\"items2\")\n\n  console.log(items2, \"items2\");\n  return items2; // sorted items \n  //-----------------------------------------------------------------\n}\nexport function getSortedFeatures(lime_data, selected_instances, selected_year) {\n  var filtered_data = lime_data.filter(item => parseInt(item['1-qid']) == selected_year && selected_instances.includes(item['two_realRank']));\n  var feature_cols = Object.keys(filtered_data[0]).filter(item => item.includes(\"_contribution\")); //.map(item => item.replace(\"_contribution\", \"\"))\n\n  var temp = [];\n  feature_cols.map(feature => {\n    var x = 0;\n    filtered_data.map(item => {\n      x += parseFloat(item[feature]);\n    });\n    temp.push([feature, x / selected_instances.length]);\n  });\n  return temp.sort((a, b) => b[1] - a[1]).map(item => item[0].replace(\"_contribution\", \"\"));\n}","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/Algorithms/algo1.js"],"names":["sort","type","state_range","default_models","selected_year","grouped_by_year_data","console","log","nDCG_dict","i","Object","keys","forEach","key","parseFloat","items","map","substring","first","second","temp_ndcg","length","includes","push","temp1","myitem","mydict","model","temp","Math","sqrt","temp_ap","groupby_year","original_data","years","sparkline_data","element","replace","temp_dict","year","parseInt","rank","features_with_score","dataset","models","selected_instances","number_of_charts","rank_data","temp_final","temp2","v","top_nine","sorted_features","key2","tempvoted_data_with_score","data","features","filtered_rank_data","filter","index","my_features_rank_col","item","feauture","items2","getSortedFeatures","lime_data","filtered_data","feature_cols","feature","x","a","b"],"mappings":"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","sourcesContent":["//------------------------------------------------------------------------------------------------- Sort Models\nexport function sort(type, state_range, default_models, selected_year, grouped_by_year_data) {\n  console.log(type, state_range, default_models, selected_year, grouped_by_year_data,'sort')\n  //------------Handle ndgc sorting\n  if (type == 'Discounted Cumulative Gain') {\n    var nDCG_dict = { \"ndcg_term_CordAscent\": 0, \"ndcg_term_LambdaMART\": 0, \"ndcg_term_LambdaRank\": 0, \"ndcg_term_LinearReg\": 0, \"ndcg_term_ListNet\": 0, \"ndcg_term_MART\": 0, \"ndcg_term_RandomFor\": 0, \"ndcg_term_RankBoost\": 0, \"ndcg_term_RankNet\": 0 }\n    for (var i = state_range[0]; i < state_range[1]; i++) {\n      Object.keys(nDCG_dict).forEach(key => {\n          nDCG_dict[key] = nDCG_dict[key] + parseFloat(grouped_by_year_data[selected_year][i][key])\n      })\n    }\n    //---- sort\n    var items = Object.keys(nDCG_dict).map(function (key) {\n      return [key.substring(10), nDCG_dict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ndcg = []\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ndcg.push(items[i][0])\n      }\n    }\n    var temp1={}\n    items.map(myitem=>{temp1[myitem[0]]=myitem[1]})\n    console.log(items)\n    return [temp_ndcg,temp1]\n  }\n  //----\n\n  //------------ Handle AP sorting\n  if (type == 'Average Precision') {\n    var mydict = {}\n    default_models.forEach((model) => {\n      var temp = 1\n      for (var i = state_range[0]; i < state_range[1]; i++) {\n        temp = temp + (grouped_by_year_data[selected_year][i][\"two_realRank\"] - grouped_by_year_data[selected_year][i][model]) ** 2\n      }\n      mydict[model] = ((state_range[1] - state_range[0]) + 1) / (Math.sqrt(temp))\n    })\n    //---- sort\n    var items = Object.keys(mydict).map(function (key) {\n      return [key, mydict[key]];\n    });\n    items.sort(function (first, second) {\n      return second[1] - first[1];\n    });\n    var temp_ap = []\n    for (var i = 0; i < items.length; i++) {\n      if (default_models.includes(items[i][0])) {\n        temp_ap.push(items[i][0])\n      }\n    }\n    return [temp_ap,mydict]\n  }\n  //------------Handle Alphabatic sorting\n  if (type == 'Alphabetically') {\n    var temp=default_models.sort()\n    return [temp,[0]]\n  }\n}\nexport function groupby_year(original_data) {\n  var years = {}\n  var sparkline_data = {}\n  original_data.forEach(element => {\n    years[element['1-qid']] = []\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')] = []\n  });\n\n  original_data.forEach(element => {\n    var temp_dict = { year: parseInt(element['1-qid']), rank: parseInt(element['two_realRank']) }\n    sparkline_data[element['State'].replace(/ /g, '').replace(/[^\\w\\s]/gi, '')].push(temp_dict)\n    years[element['1-qid']].push(element)\n  });\n  return { years: years, sparkline_data: sparkline_data };\n}\nexport function features_with_score(dataset, models, selected_instances, selected_year, number_of_charts, rank_data) {\n  //console.log(dataset, models, selected_instances, selected_year, number_of_charts, rank_data,\"abc\")\n  var temp1 = {}\n  var temp_final = {}\n  models.map(model => {\n    var temp2 = {}\n    var v = number_of_charts;\n    var top_nine = sorted_features(dataset, model, selected_instances, selected_year,rank_data)\n    if (top_nine.length < number_of_charts) { v = top_nine.length;; number_of_charts = top_nine.length } // This is because number of charts is calculated based on space but there are cases when we don't have that many features\n    for (var i = 0; i < number_of_charts; i++) {\n      temp2[top_nine[i]] = v;\n      v = v - 1\n    }\n    temp1[model] = temp2\n  });\n\n  for (var key in temp1) {\n    for (var key2 in temp1[key]) {\n      if (temp_final[key2] > 0) {\n\n        temp_final[key2] = temp_final[key2] + temp1[key][key2]\n      }\n      else {\n        temp_final[key2] = temp1[key][key2]\n      }\n    }\n  }\n  console.log(temp_final,\"temp_final\")\n  return temp_final;\n}\nexport function sorted_features(dataset, model, selected_instances, selected_year,rank_data) { // Uses feature rank to rank and return features name by removing the feature_rank string\n  if (!selected_instances.length > 0) { return [] }\n  selected_instances = selected_instances.map(element => element -1)\n  var tempvoted_data_with_score = {},items,data,features;\n  \n\n  var filtered_rank_data = rank_data[model].filter(element => { if (parseInt(element['1-qid']) == parseInt(selected_year)) { return element } })\n  data = selected_instances.map(index => filtered_rank_data[index])\n  features = Object.keys(data[0])\n  var my_features_rank_col=features.filter(item=>item.includes(\"_feature_rank\"))\n  features=my_features_rank_col\n  data.map(item => {\n    features.forEach(feauture => {\n      if (tempvoted_data_with_score[feauture] >= 0 || tempvoted_data_with_score[feauture] < 0) {\n        tempvoted_data_with_score[feauture] = tempvoted_data_with_score[feauture] + (parseFloat(item[feauture]))\n      }\n      else { tempvoted_data_with_score[feauture] = parseFloat(item[feauture]) }\n    })\n  })\n  //-----------------------------------------------------------------\n  // Create items array\n  items = Object.keys(tempvoted_data_with_score).map(function (key) {\n    return [key, tempvoted_data_with_score[key]];\n  });\n  // Sort the array based on the second element\n  items.sort(function (first, second) {\n    return first[1] - second[1];\n  });\n  var items2 = items.map((element) => element[0].replace(\"_feature_rank\", \"\"))\n  items2 = items2.filter(item => item != \"1-qid\" && item!=\"model\")\n  //console.log(data,selected_instances,filtered_rank_data,\"items2\")\n  console.log(items2,\"items2\")\n  return items2; // sorted items \n  //-----------------------------------------------------------------\n}\n\nexport function getSortedFeatures(lime_data,selected_instances, selected_year) {\n  var filtered_data=lime_data.filter(item=>parseInt(item['1-qid'])==selected_year && selected_instances.includes(item['two_realRank']))\n  var feature_cols=Object.keys(filtered_data[0]).filter(item=>item.includes(\"_contribution\")) //.map(item => item.replace(\"_contribution\", \"\"))\n  var temp=[]\n  feature_cols.map(feature=>{\n    var x=0\n    filtered_data.map(item=>{\n      x+=parseFloat(item[feature])\n    })\n    temp.push([feature,x/selected_instances.length])\n  })\nreturn temp.sort((a,b)=>b[1]-a[1]).map(item => item[0].replace(\"_contribution\", \"\"))\n}\n"]},"metadata":{},"sourceType":"module"}