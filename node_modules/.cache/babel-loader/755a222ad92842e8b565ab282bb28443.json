{"ast":null,"code":"import _classCallCheck from\"/Users/kaustav/NewWork/trivea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/kaustav/NewWork/trivea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/kaustav/NewWork/trivea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/kaustav/NewWork/trivea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{connect}from\"react-redux\";import*as misc_algo from'../../../Algorithms/misc_algo';import CreateCatChart from'./CreateCatChart';import CreateNumChart from'./CreateNumChart';var Chart=/*#__PURE__*/function(_Component){_inherits(Chart,_Component);var _super=_createSuper(Chart);function Chart(props){_classCallCheck(this,Chart);return _super.call(this,props);}_createClass(Chart,[{key:\"componentDidMount\",value:function componentDidMount(){this.setState({a:5});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var _this=this;var temp_dict={};this.props.default_models.filter(function(item){return item!=\"ListNet\";}).map(function(model){temp_dict[model]=_this.props.popup_chart_data[0][model].filter(function(item){return item['deviation']<_this.props.threshold;}).map(function(item){//item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\nitem['id']=item['State'].replace(/ /g,'').replace(/[^a-zA-Z ]/g,\"\");return item;});});var merged_arr=[].concat.apply([],Object.values(temp_dict));var scatterplot_data=Object.entries(this.props.popup_chart_data[0]).filter(function(item){return _this.props.pop_over_models.includes(item[0]);});//----------------------------------------------------------------------------------------------------------Call createChart\nif(merged_arr.length>0){// This is to avoid the error caused by the next line\nif(isNaN(merged_arr[0][this.props.popup_chart_data[1]])){CreateCatChart(merged_arr,this.props.popup_chart_data[1],scatterplot_data,this.props,this.props.deviation_array);}else{CreateNumChart(merged_arr,this.props.popup_chart_data[1],scatterplot_data,this.props,this.props.deviation_array);}}else{CreateNumChart(merged_arr,this.props.popup_chart_data[1],scatterplot_data,this.props,this.props.deviation_array);// calling the function to set the  graph empty when all models are unselected\n}misc_algo.handle_transparency(\"None\",this.props.clicked_circles,this.props.anim_config);}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{key:this.props.popup_chart_data[1],style:{margin:10,padding:10,border:this.props.index==0?\"3px solid #e5e5e5\":\"white\"}},/*#__PURE__*/React.createElement(\"svg\",{id:this.props.myid,className:\"pop_over\"},\" \"),/*#__PURE__*/React.createElement(\"p\",{style:{color:\"#4f4c4c\",marginLeft:\"42%\",marginTop:-25,marginBottom:0}},this.props.popup_chart_data[1]));}}]);return Chart;}(Component);var maptstateToprop=function maptstateToprop(state){return{//popup_chart_data: state.popup_chart_data,\npop_over_models:state.pop_over_models,clicked_circles:state.clicked_circles,threshold:state.threshold,anim_config:state.anim_config,deviation_array:state.deviation_array};};//item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\nvar mapdispatchToprop=function mapdispatchToprop(dispatch){return{Set_clicked_circles:function Set_clicked_circles(val){return dispatch({type:\"clicked_circles\",value:val});}};};export default connect(maptstateToprop,mapdispatchToprop)(Chart);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Popover/02Charts.js"],"names":["React","Component","connect","misc_algo","CreateCatChart","CreateNumChart","Chart","props","setState","a","temp_dict","default_models","filter","item","map","model","popup_chart_data","threshold","replace","merged_arr","concat","apply","Object","values","scatterplot_data","entries","pop_over_models","includes","length","isNaN","deviation_array","handle_transparency","clicked_circles","anim_config","margin","padding","border","index","myid","color","marginLeft","marginTop","marginBottom","maptstateToprop","state","mapdispatchToprop","dispatch","Set_clicked_circles","val","type","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as misc_algo from '../../../Algorithms/misc_algo'\nimport CreateCatChart from './CreateCatChart'\nimport CreateNumChart from './CreateNumChart'\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.setState({ a: 5 })\n  }\n  componentDidUpdate() {\n    var temp_dict = {}\n    this.props.default_models.filter(item => item != \"ListNet\").map(model => {\n      temp_dict[model] = this.props.popup_chart_data[0][model].filter(item=>item['deviation']<this.props.threshold).map(item=>{\n        //item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n        item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\n        return item\n      })\n    })\n    var merged_arr = [].concat.apply([], Object.values(temp_dict))\n    var scatterplot_data = Object.entries(this.props.popup_chart_data[0]).filter(item => this.props.pop_over_models.includes(item[0]))\n    //----------------------------------------------------------------------------------------------------------Call createChart\n    if (merged_arr.length > 0) { // This is to avoid the error caused by the next line\n      if (isNaN(merged_arr[0][this.props.popup_chart_data[1]])) {\n        CreateCatChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array)\n      }\n      else {\n        CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array)\n      }\n    }\n    else {\n      CreateNumChart(merged_arr, this.props.popup_chart_data[1], scatterplot_data,this.props,this.props.deviation_array) // calling the function to set the  graph empty when all models are unselected\n    }\n    misc_algo.handle_transparency(\"None\", this.props.clicked_circles, this.props.anim_config)\n  }\n\n  render() {\n    return (\n      <div key={this.props.popup_chart_data[1]} style={{ margin: 10, padding: 10, border: this.props.index == 0 ? \"3px solid #e5e5e5\" : \"white\" }}>\n        <svg id={this.props.myid} className=\"pop_over\"> </svg>\n        <p style={{ color: \"#4f4c4c\", marginLeft: \"42%\", marginTop: -25, marginBottom: 0 }}>{this.props.popup_chart_data[1]}</p>\n      </div>\n    );\n  }\n}\nconst maptstateToprop = (state) => {\n  return {\n    //popup_chart_data: state.popup_chart_data,\n    pop_over_models: state.pop_over_models,\n    clicked_circles: state.clicked_circles,\n    threshold: state.threshold,\n    anim_config:state.anim_config,\n    deviation_array: state.deviation_array,\n  }\n}\n//item['id'] = item['State'].replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\") + model.replace(/ /g, '').replace(/[^a-zA-Z ]/g, \"\")\nconst mapdispatchToprop = (dispatch) => {\n  return {\n    Set_clicked_circles: (val) => dispatch({ type: \"clicked_circles\", value: val }),\n  }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(Chart);"]},"metadata":{},"sourceType":"module"}