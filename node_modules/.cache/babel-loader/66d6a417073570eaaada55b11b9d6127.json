{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Charts/Popover/01Popover.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport Chart_pop from './02Charts';\nimport Draggable from 'react-draggable';\nimport Grid from \"@material-ui/core/Grid\";\nimport FilterModel from \"./FilterModel\";\nexport function SimplePopover(props) {\n  const handleClose = () => {\n    props.set_pop_over(false);\n    props.set_dbclicked_features([]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pop_over\",\n    style: {\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, props.pop_over == true ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      top: \"2%\",\n      left: \"14%\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      backgroundColor: \"transparent\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Draggable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    style: {\n      backgroundColor: \"#ffffff\",\n      boxShadow: \"3px 2px 15px -7px #000000\",\n      pointerEvents: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    style: {\n      borderBottom: \"1px solid #e2e2e2\",\n      marginBottom: 20\n    },\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FilterModel, {\n    default_models: props.default_models,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    id: \"draggable-dialog-title\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 33\n    }\n  }, \"close\")), props.mode == \"Model\" ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      maxHeight: 700,\n      overflow: \"scroll\",\n      maxWidth: 1600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 57\n    }\n  }, props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => /*#__PURE__*/React.createElement(Chart_pop, {\n    index: index,\n    popup_chart_data: [props.popup_chart_data[0], item],\n    default_models: props.default_models,\n    myid: item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, ''),\n    diverginColor: props.diverginColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 125\n    }\n  })) : /*#__PURE__*/React.createElement(Chart_pop, {\n    popup_chart_data: props.popup_chart_data,\n    default_models: props.default_models,\n    myid: \"myid1\",\n    diverginColor: props.diverginColor,\n    textClickHandler_original: props.textClickHandler_original,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 58\n    }\n  })) : null, props.mode == \"Ranges\" ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      maxHeight: 700,\n      overflow: \"scroll\",\n      maxWidth: 1600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 58\n    }\n  }, props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => /*#__PURE__*/React.createElement(Chart_pop, {\n    index: index,\n    popup_chart_data: [props.popup_chart_data[0], item],\n    default_models: props.default_models,\n    myid: item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, ''),\n    diverginColor: props.diverginColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 125\n    }\n  })) : /*#__PURE__*/React.createElement(Chart_pop, {\n    popup_chart_data: props.popup_chart_data,\n    default_models: props.default_models,\n    myid: \"myid1\",\n    diverginColor: props.diverginColor,\n    textClickHandler_original: props.textClickHandler_original,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 58\n    }\n  })) : null, props.mode == \"Time\" ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    style: {\n      maxHeight: 700,\n      overflow: \"scroll\",\n      maxWidth: 1600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 56\n    }\n  }, props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => /*#__PURE__*/React.createElement(Chart_pop, {\n    index: index,\n    popup_chart_data: [props.popup_chart_data[0], item],\n    default_models: props.default_models,\n    myid: item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, ''),\n    diverginColor: props.diverginColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 125\n    }\n  })) : /*#__PURE__*/React.createElement(Chart_pop, {\n    popup_chart_data: props.popup_chart_data,\n    default_models: props.default_models,\n    myid: \"myid1\",\n    diverginColor: props.diverginColor,\n    textClickHandler_original: props.textClickHandler_original,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 58\n    }\n  })) : null))) : null);\n}\n\nconst maptstateToprop = state => {\n  return {\n    popup_chart_data: state.popup_chart_data,\n    pop_over: state.pop_over,\n    dbclicked_features: state.dbclicked_features,\n    mode: state.mode\n  };\n};\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    set_pop_over: val => dispatch({\n      type: \"pop_over\",\n      value: val\n    }),\n    set_dbclicked_features: val => dispatch({\n      type: \"dbclicked_features\",\n      value: val\n    }),\n    set_clicked_features: val => dispatch({\n      type: \"clicked_features\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(SimplePopover);","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Charts/Popover/01Popover.js"],"names":["React","Button","connect","Chart_pop","Draggable","Grid","FilterModel","SimplePopover","props","handleClose","set_pop_over","set_dbclicked_features","position","pop_over","top","left","pointerEvents","backgroundColor","boxShadow","borderBottom","marginBottom","default_models","mode","maxHeight","overflow","maxWidth","dbclicked_features","length","map","item","index","popup_chart_data","replace","diverginColor","textClickHandler_original","maptstateToprop","state","mapdispatchToprop","dispatch","val","type","value","set_clicked_features"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport Chart_pop from './02Charts'\nimport Draggable from 'react-draggable';\nimport Grid from \"@material-ui/core/Grid\"\nimport FilterModel from \"./FilterModel\"\nexport function SimplePopover(props) {\n    const handleClose = () => {\n        props.set_pop_over(false)\n        props.set_dbclicked_features([])\n    };\n    return (\n        <div className=\"pop_over\" style={{ position: \"relative\" }}>\n            {props.pop_over == true ?\n                <div style={{ top: \"2%\", left: \"14%\", position: \"fixed\", pointerEvents: \"none\", backgroundColor: \"transparent\" }}>\n                    <Draggable>\n                        <Grid style={{ backgroundColor: \"#ffffff\", boxShadow: \"3px 2px 15px -7px #000000\", pointerEvents: \"auto\" }}>\n                            <Grid container style={{ borderBottom: \"1px solid #e2e2e2\", marginBottom: 20 }}\n                                direction=\"row\"\n                                justify=\"space-between\"\n                                alignItems=\"center\"\n                            >\n                                <FilterModel default_models={props.default_models}></FilterModel>\n                                <Button color=\"secondary\" id=\"draggable-dialog-title\" onClick={handleClose}>close</Button>\n                            </Grid>\n                            {\n                                props.mode == \"Model\" ? <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ maxHeight: 700, overflow: \"scroll\", maxWidth: 1600 }}>\n                                    {\n                                        props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => <Chart_pop\n                                            index={index}\n                                            popup_chart_data={[props.popup_chart_data[0], item]} default_models={props.default_models}\n                                            myid={item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '')} diverginColor={props.diverginColor}\n                                        ></Chart_pop>) : <Chart_pop popup_chart_data={props.popup_chart_data} default_models={props.default_models} myid=\"myid1\" diverginColor={props.diverginColor} textClickHandler_original={props.textClickHandler_original}></Chart_pop>\n                                    }\n                                </Grid> : null\n                            }\n                            {\n                                props.mode == \"Ranges\" ? <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ maxHeight: 700, overflow: \"scroll\", maxWidth: 1600 }}>\n                                    {\n                                        props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => <Chart_pop index={index}\n                                            popup_chart_data={[props.popup_chart_data[0], item]} default_models={props.default_models}\n                                            myid={item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '')} diverginColor={props.diverginColor}\n                                        ></Chart_pop>) : <Chart_pop popup_chart_data={props.popup_chart_data} default_models={props.default_models} myid=\"myid1\" diverginColor={props.diverginColor} textClickHandler_original={props.textClickHandler_original}></Chart_pop>\n                                    }\n                                </Grid> : null\n                            }\n                            {\n                                props.mode == \"Time\" ? <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ maxHeight: 700, overflow: \"scroll\", maxWidth: 1600 }}>\n                                    {\n                                        props.dbclicked_features.length > 0 ? props.dbclicked_features.map((item, index) => <Chart_pop\n                                            index={index}\n                                            popup_chart_data={[props.popup_chart_data[0], item]} default_models={props.default_models}\n                                            myid={item.replace(/\\s/g, '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '')} diverginColor={props.diverginColor}\n                                        ></Chart_pop>) : <Chart_pop popup_chart_data={props.popup_chart_data} default_models={props.default_models} myid=\"myid1\" diverginColor={props.diverginColor} textClickHandler_original={props.textClickHandler_original}></Chart_pop>\n                                    }\n                                </Grid> : null\n                            }\n                        </Grid>\n                    </Draggable>\n                </div> : null}\n        </div>\n    );\n}\nconst maptstateToprop = (state) => {\n    return {\n        popup_chart_data: state.popup_chart_data,\n        pop_over: state.pop_over,\n        dbclicked_features: state.dbclicked_features,\n        mode: state.mode,\n    }\n}\nconst mapdispatchToprop = (dispatch) => {\n    return {\n        set_pop_over: (val) => dispatch({ type: \"pop_over\", value: val }),\n        set_dbclicked_features: (val) => dispatch({ type: \"dbclicked_features\", value: val }),\n        set_clicked_features: (val) => dispatch({ type: \"clicked_features\", value: val }),\n    }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(SimplePopover);\n"]},"metadata":{},"sourceType":"module"}