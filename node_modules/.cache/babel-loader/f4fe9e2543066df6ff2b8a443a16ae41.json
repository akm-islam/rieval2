{"ast":null,"code":"var _jsxFileName = \"/Users/kaustav/NewWork/trivea/src/components/Top/FeatureHistograms/FeatureHistograms.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as d3 from 'd3';\nimport exp_fiscal_CordAscent from \"../../../Data/data/fiscal/lime/chart1_data.csv\";\nimport exp_school_CordAscent from \"../../../Data/data/school/lime/chart1_data.csv\";\nimport exp_house_CordAscent from \"../../../Data/data/house/lime/chart1_data.csv\";\nimport rur_histogram_data from \"../../../Data/RUR/RUR_histogram_data.csv\";\nimport CreateHistogram from './CreateHistogram';\nimport CreateBarChart from './CreateBarChart';\nimport Button from '@material-ui/core/Button';\n\nclass FeatureHistograms extends Component {\n  constructor(props) {\n    super(props);\n\n    this.store_instances = (feature_name, instances) => {\n      var temp = { ...this.state.all_instances\n      };\n      temp[feature_name] = instances;\n      this.setState({\n        all_instances: temp\n      });\n    };\n\n    this.state = {\n      feature_data: []\n    };\n  }\n\n  componentDidMount() {\n    var filename;\n\n    if (this.props.dataset == \"fiscal\") {\n      filename = exp_fiscal_CordAscent;\n    } else if (this.props.dataset == \"school\") {\n      filename = exp_school_CordAscent;\n    } else if (this.props.dataset == \"house\") {\n      filename = exp_house_CordAscent;\n    } else if (this.props.dataset == \"rur\") {\n      filename = rur_histogram_data;\n    }\n\n    d3.csv(filename).then(feature_data => {\n      this.setState({\n        feature_data: feature_data,\n        all_instances: {}\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (typeof this.state.all_instances != \"undefined\" && JSON.stringify(nextState.all_instances) !== JSON.stringify(this.state.all_instances)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  componentDidUpdate() {\n    var self = this;\n    var filename;\n    var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1); //-------------------- Get the features and sort them\n\n    var number_of_charts = 9;\n    var filtered_rank_data = this.props.rank_data[this.props.default_models[0]].filter(element => {\n      if (parseInt(element['1-qid']) == parseInt(this.props.selected_year)) {\n        return element;\n      }\n    });\n    var data = selected_instances.map(index => filtered_rank_data[index]);\n    var my_features_rank_col = Object.keys(data[0]).filter(item => item.includes(\"_feature_rank\"));\n    var sorted_features = my_features_rank_col.map(element => element.replace(\"_feature_rank\", \"\")).sort((a, b) => a.localeCompare(b));\n    console.log(sorted_features, \"dddd\"); //--------------------\n\n    if (this.props.dataset == \"fiscal\") {\n      filename = exp_fiscal_CordAscent;\n    } else if (this.props.dataset == \"school\") {\n      filename = exp_school_CordAscent;\n    } else if (this.props.dataset == \"rur\") {\n      filename = rur_histogram_data;\n    } //--------------------------------Iterate through each features\n\n\n    d3.select(\".feature_histograms_container\").selectAll(\".feature\").data(sorted_features, d => d).join(\"svg\").attr(\"class\", 'feature').attr(\"add_histogram\", function (d, feature_index) {\n      var histogram_data = [];\n\n      if (!isNaN(self.state.feature_data[0][d])) {\n        self.state.feature_data.forEach(element => {\n          if (element[\"1-qid\"] == self.props.selected_year) {\n            var temp_dict = {};\n            temp_dict[\"x\"] = parseInt(element['two_realRank']);\n            temp_dict[\"y\"] = parseFloat(element[d]);\n            histogram_data.push(temp_dict);\n          }\n        });\n        CreateHistogram(histogram_data, d3.select(this), d, feature_index, sorted_features.length, self.store_instances);\n      } else {\n        self.state.feature_data.forEach(element => {\n          if (element[\"1-qid\"] == self.props.selected_year) {\n            var temp_dict = {};\n            temp_dict[\"x\"] = parseInt(element['two_realRank']);\n            temp_dict[\"y\"] = element[d];\n            histogram_data.push(temp_dict);\n          }\n        });\n        CreateBarChart(histogram_data, d3.select(this), d, feature_index, sorted_features.length, self.store_instances, self.state.all_instances);\n      }\n\n      if (d == \"UAAL_pension_risk_free\") {\n        console.log(d, self.state.feature_data, \"dddd\");\n      }\n    }).attr('id', d => d); //.call(d3.brush().extent([[0, margin.top], [400, 65]]))\n    //--------------------------------Iterate through each features\n  }\n\n  render() {\n    return this.props.original_data != null ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'relative',\n        width: 400,\n        marginTop: -8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 48\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      fullWidth: true,\n      style: {\n        margin: 0,\n        position: 'sticky',\n        top: 0,\n        backgroundColor: \"gray\",\n        borderRadius: 0\n      },\n      onClick: () => {\n        var selected_instances = [...new Set([].concat(...Object.values(this.state.all_instances)))];\n        var filtered_instances = selected_instances.filter(item => item >= this.props.state_range[0] && item <= this.props.state_range[1]);\n        this.props.handleClose(); // This will close the select menu\n\n        if (filtered_instances.length == 0) {\n          alert(\"No instance is available withing the selected range!\");\n        }\n\n        this.props.Set_histogram_data([...filtered_instances]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, \" Update \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"feature_histograms_container_div\",\n      style: {\n        display: 'relative',\n        width: 400,\n        height: window.innerHeight,\n        overflow: \"scroll\",\n        marginTop: -8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"feature_histograms_container\",\n      style: {\n        width: \"100%\",\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, \" \"))) : null;\n  }\n\n}\n\nconst maptstateToprop = state => {\n  return {\n    dataset: state.dataset,\n    deviate_by: state.deviate_by,\n    state_range: state.state_range,\n    default_models: state.default_models,\n    selected_year: state.selected_year,\n    sparkline_data: state.sparkline_data,\n    show: state.show,\n    mode: state.mode,\n    original_data: state.original_data,\n    rank_data: state.rank_data\n  };\n};\n\nconst mapdispatchToprop = dispatch => {\n  return {\n    Set_slider_max: val => dispatch({\n      type: \"slider_max\",\n      value: val\n    }),\n    Set_state_range: val => dispatch({\n      type: \"state_range\",\n      value: val\n    }),\n    Set_histogram_data: val => dispatch({\n      type: \"histogram_data\",\n      value: val\n    })\n  };\n};\n\nexport default connect(maptstateToprop, mapdispatchToprop)(FeatureHistograms); //https://material-ui.com/api/slider/\n//https://material-ui.com/components/expansion-panels/\n//https://material-ui.com/api/checkbox/\n//https://material-ui.com/components/radio-buttons/","map":{"version":3,"sources":["/Users/kaustav/NewWork/trivea/src/components/Top/FeatureHistograms/FeatureHistograms.js"],"names":["React","Component","connect","d3","exp_fiscal_CordAscent","exp_school_CordAscent","exp_house_CordAscent","rur_histogram_data","CreateHistogram","CreateBarChart","Button","FeatureHistograms","constructor","props","store_instances","feature_name","instances","temp","state","all_instances","setState","feature_data","componentDidMount","filename","dataset","csv","then","shouldComponentUpdate","nextProps","nextState","JSON","stringify","componentDidUpdate","self","selected_instances","range","state_range","number_of_charts","filtered_rank_data","rank_data","default_models","filter","element","parseInt","selected_year","data","map","index","my_features_rank_col","Object","keys","item","includes","sorted_features","replace","sort","a","b","localeCompare","console","log","select","selectAll","d","join","attr","feature_index","histogram_data","isNaN","forEach","temp_dict","parseFloat","push","length","render","original_data","display","width","marginTop","margin","position","top","backgroundColor","borderRadius","Set","concat","values","filtered_instances","handleClose","alert","Set_histogram_data","height","window","innerHeight","overflow","padding","maptstateToprop","deviate_by","sparkline_data","show","mode","mapdispatchToprop","dispatch","Set_slider_max","val","type","value","Set_state_range"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as d3 from 'd3';\nimport exp_fiscal_CordAscent from \"../../../Data/data/fiscal/lime/chart1_data.csv\";\nimport exp_school_CordAscent from \"../../../Data/data/school/lime/chart1_data.csv\";\nimport exp_house_CordAscent from \"../../../Data/data/house/lime/chart1_data.csv\";\nimport rur_histogram_data from \"../../../Data/RUR/RUR_histogram_data.csv\";\nimport CreateHistogram from './CreateHistogram'\nimport CreateBarChart from './CreateBarChart';\nimport Button from '@material-ui/core/Button';\nclass FeatureHistograms extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { feature_data: [] };\n    }\n    componentDidMount() {\n        var filename; if (this.props.dataset == \"fiscal\") { filename = exp_fiscal_CordAscent } else if (this.props.dataset == \"school\") { filename = exp_school_CordAscent } else if (this.props.dataset == \"house\") { filename = exp_house_CordAscent } else if (this.props.dataset == \"rur\") { filename = rur_histogram_data }\n        d3.csv(filename).then(feature_data => {\n            this.setState({ feature_data: feature_data,all_instances:{} })\n        })\n    }\n    store_instances=(feature_name,instances)=>{\n        var temp={...this.state.all_instances}\n        temp[feature_name]=instances\n        this.setState({all_instances:temp})\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        if(typeof(this.state.all_instances)!=\"undefined\" && JSON.stringify(nextState.all_instances)!==JSON.stringify(this.state.all_instances)){\n            return false\n        }\n        return true    \n    }\n    componentDidUpdate() {\n        var self = this\n        var filename;\n        var selected_instances = d3.range(this.props.state_range[0], this.props.state_range[1] + 1)\n       \n        //-------------------- Get the features and sort them\n        var number_of_charts = 9\n        var filtered_rank_data = this.props.rank_data[this.props.default_models[0]].filter(element => { if (parseInt(element['1-qid']) == parseInt(this.props.selected_year)) { return element } })\n        var data = selected_instances.map(index => filtered_rank_data[index])\n        var my_features_rank_col=Object.keys(data[0]).filter(item=>item.includes(\"_feature_rank\"))\n        var sorted_features = my_features_rank_col.map((element) => element.replace(\"_feature_rank\", \"\")).sort((a, b) => a.localeCompare(b))\n        console.log(sorted_features,\"dddd\")\n        //--------------------\n\n\n        if (this.props.dataset == \"fiscal\") { filename = exp_fiscal_CordAscent } else if (this.props.dataset == \"school\") { filename = exp_school_CordAscent } else if (this.props.dataset == \"rur\") { filename = rur_histogram_data }\n        //--------------------------------Iterate through each features\n        \n        \n        d3.select(\".feature_histograms_container\").selectAll(\".feature\").data(sorted_features, d => d).join(\"svg\").attr(\"class\", 'feature')\n            .attr(\"add_histogram\", function (d, feature_index) {\n                var histogram_data = []\n                if (!isNaN(self.state.feature_data[0][d])) {\n                    self.state.feature_data.forEach(element => {\n                        if (element[\"1-qid\"] == self.props.selected_year) {\n                            var temp_dict = {}\n                            temp_dict[\"x\"] = parseInt(element['two_realRank'])\n                            temp_dict[\"y\"] = parseFloat(element[d])\n                            histogram_data.push(temp_dict)\n                        }\n                    });\n                    CreateHistogram(histogram_data, d3.select(this), d, feature_index, sorted_features.length,self.store_instances)\n                }\n                else {\n                    self.state.feature_data.forEach(element => {\n                        if (element[\"1-qid\"] == self.props.selected_year) {\n                            var temp_dict = {}\n                            temp_dict[\"x\"] = parseInt(element['two_realRank'])\n                            temp_dict[\"y\"] = element[d]\n                            histogram_data.push(temp_dict)\n                        }})\n                    CreateBarChart(histogram_data, d3.select(this), d, feature_index, sorted_features.length,self.store_instances,self.state.all_instances)\n                }\n                if(d==\"UAAL_pension_risk_free\"){\n                    console.log(d,self.state.feature_data,\"dddd\")\n                }\n            })\n            .attr('id',d=>d)\n            //.call(d3.brush().extent([[0, margin.top], [400, 65]]))\n        //--------------------------------Iterate through each features\n    }\n    render() {\n        return (\n            this.props.original_data != null ? <div style={{display:'relative', width: 400,marginTop:-8 }}>\n                <Button fullWidth style={{margin:0,position:'sticky',top:0,backgroundColor:\"gray\",borderRadius:0}} onClick={()=>{\n                    var selected_instances=[...new Set([].concat(...Object.values(this.state.all_instances)))]\n                    var filtered_instances=selected_instances.filter(item => item>=this.props.state_range[0] && item<=this.props.state_range[1])\n                    this.props.handleClose() // This will close the select menu\n                    if(filtered_instances.length==0){alert(\"No instance is available withing the selected range!\")}\n                    this.props.Set_histogram_data([...filtered_instances])\n                }}> Update </Button>\n                <div className=\"feature_histograms_container_div\" style={{display:'relative', width: 400, height: window.innerHeight, overflow: \"scroll\",marginTop:-8 }}>\n                <svg className=\"feature_histograms_container\" style={{ width: \"100%\", padding: 10 }}> </svg>\n                </div>\n            </div> : null\n        );\n    }\n}\nconst maptstateToprop = (state) => {\n    return {\n        dataset: state.dataset,\n        deviate_by: state.deviate_by,\n        state_range: state.state_range,\n        default_models: state.default_models,\n        selected_year: state.selected_year,\n        sparkline_data: state.sparkline_data,\n        show: state.show,\n        mode: state.mode,\n        original_data: state.original_data,\n        rank_data: state.rank_data,\n    }\n}\nconst mapdispatchToprop = (dispatch) => {\n    return {\n        Set_slider_max: (val) => dispatch({ type: \"slider_max\", value: val }),\n        Set_state_range: (val) => dispatch({ type: \"state_range\", value: val }),\n        Set_histogram_data: (val) => dispatch({ type: \"histogram_data\", value: val }),\n    }\n}\nexport default connect(maptstateToprop, mapdispatchToprop)(FeatureHistograms);\n\n//https://material-ui.com/api/slider/\n//https://material-ui.com/components/expansion-panels/\n//https://material-ui.com/api/checkbox/\n//https://material-ui.com/components/radio-buttons/"]},"metadata":{},"sourceType":"module"}